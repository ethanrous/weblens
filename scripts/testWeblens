#!/bin/bash
usage="Usage: $0 [-n|--native [package_target]]"

run_native_tests() {
    target="${1:-./...}" # Default to ./... if no target specified

    # Go is very picky about whitespace, so we need to strip it out
    target=$(awk '{$1=$1};1' <<<"$target")

    echo "Running native tests for package: $target"

    /usr/local/go/bin/go test -v -cover -race -coverprofile=/cover/coverage.out "$target" | grep -v -e "=== RUN" -e "=== PAUSE" -e "--- PASS"
    exit $?
}

tests=""

while [ "${1:-}" != "" ]; do
    case "$1" in
    "-n" | "--native")
        shift
        run_native_tests "${1:-}"
        ;;
    "-h" | "--help")
        echo "$usage"
        exit 0
        ;;
    *)
        tests="$tests$1 "
        ;;
    esac
    shift
done

arch=$(uname -m)

if ! docker build -t ethrous/weblens-test --build-arg ARCHITECTURE="$arch" --file ./docker/AlpineTester.Dockerfile .; then
    echo "Failed to build Docker image, exiting..."
    exit 1
fi

docker network create weblens-net >/dev/null 2>&1
docker stop weblens-test-mongo >/dev/null 2>&1
docker rm weblens-test-mongo >/dev/null 2>&1
rm -rf ./build/fs/test-mongo-container/db

echo "Starting MongoDB container..."
docker run \
    -d \
    --name weblens-test-mongo \
    --network weblens-net \
    -v ./build/fs/test-mongo-container/db:/data/db \
    mongo \
    mongod --replSet rs0

echo "MongoDB container started, waiting for it to be ready..."

retries=0
while [ $retries -lt 10 ]; do
    retries=$((retries + 1))
    if ! docker exec weblens-test-mongo mongosh --eval "rs.initiate({
			_id: 'rs0',
			members: [
			{ _id: 0, host: 'weblens-test-mongo' }
			]
		})" 1>/dev/null; then
        if ! docker ps | grep weblens-test-mongo; then
            echo "MongoDB container is not running, exiting..."
            docker logs weblens-test-mongo
            exit 1
        fi

        echo "Waiting for MongoDB to be ready..."

        sleep 1
    else
        break
    fi
done

echo "MongoDB is ready, starting test container..."

rm -rf ./build/fs/test-container
docker run --rm --platform="linux/$arch" --network=weblens-net -v ./build/fs/test-container/data:/data -v ./build/fs/test-container/cache:/cache -v ./build/cache/test/go/pkg:/go/pkg/mod -v ./build/cache/test/go/build:/tmp/go-cache -v ./build/cover:/cover ethrous/weblens-test -n "${tests}"

exit $?
