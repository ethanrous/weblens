#!/bin/bash

if [[ ! -e ./cmd ]]; then
    echo "ERR Could not find ./cmd directory, are you at the root of the repo? i.e. ~/repos/weblens and not ~/repos/weblens/scripts"
    exit 1
fi

mkdir -p ./build/bin
mkdir -p ./build/logs

trace=false
docs=false
detach=false
build_ui=false
log_file="$WEBLENS_LOG_FILE"
config_name="$CONFIG_NAME"

while [ "${1:-}" != "" ]; do
    case "$1" in
    "--config")
        shift
        config_name=$1
        ;;
    "--log")
        shift
        log_file=$1
        ;;
    "-t" | "--trace")
        trace=true
        ;;
    "--ui")
        build_ui=true
        ;;
    "--docs")
        docs=true
        ;;
    "-d" | "--detach")
        detach=true
        ;;
    esac
    shift
done

if [[ $detach == true ]] && [[ -z "$log_file" ]]; then
    echo "ERR --detach requires --log to be set"
    exit 1
fi

if [[ -z "$config_name" ]]; then
    export config_name="DEBUG-CORE"
fi

printf "Using config: %s" "$config_name"
if [[ $trace == true ]]; then
    export LOG_LEVEL="trace"
    printf " +trace"
fi
printf "\n"

if [[ $docs == true ]]; then
    printf "Building Docs..."
    if ! ./scripts/swaggo &>./build/logs/docs-build.log; then
        printf " FAILED\n"
        cat ./build/logs/docs-build.log
        echo "Aborting Weblens startup. Failed to build docs"
        exit 1
    else
        printf " DONE\n"
    fi

fi

if [[ $build_ui == true ]]; then
    cd ./ui || exit
    printf "Building UI..."
    if [[ ! -d ./node_modules ]]; then
        npm install &>/dev/null
    fi
    export VITE_APP_BUILD_TAG="DEV-BUILD"
    export VITE_BUILD=true

    if ! npm run build &>../build/logs/ui-build.log; then
        printf " FAILED\n"
        cat ../build/logs/ui-build.log
        echo "Aborting Weblens startup. Ensure \`npm run build\` completes successfully before starting Weblens."
        exit 1
    else
        printf " DONE\n"
    fi

    cd ..
fi

printf "Building Weblens binary..."
rm -f ./build/bin/weblens

pwd=$(pwd)

# export GORACE="halt_on_error=1"
# export CGO_CFLAGS_ALLOW='-Xpreprocessor'
# export APP_ROOT=$pwd
# export CONFIG_NAME=$config_name

# Build and launch the binary, automatically restarting on changes
go build -gcflags="all=-N -l" -race -o ./build/bin/weblens ./cmd/weblens
# air
