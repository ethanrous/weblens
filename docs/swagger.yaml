basePath: /api/v1/
definitions:
  AddUserParams:
    properties:
      canDelete:
        type: boolean
      canDownload:
        type: boolean
      canEdit:
        type: boolean
      username:
        type: string
    required:
    - username
    type: object
  ApiKeyParams:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  BackupInfo:
    properties:
      fileHistory:
        items:
          $ref: '#/definitions/FileActionInfo'
        type: array
      instances:
        items:
          $ref: '#/definitions/TowerInfo'
        type: array
      lifetimesCount:
        type: integer
      tokens:
        items:
          $ref: '#/definitions/TokenInfo'
        type: array
      users:
        items:
          $ref: '#/definitions/UserInfoArchive'
        type: array
    type: object
  CreateFolderBody:
    properties:
      children:
        items:
          type: string
        type: array
      newFolderName:
        type: string
      parentFolderId:
        type: string
    required:
    - newFolderName
    - parentFolderId
    type: object
  FileActionInfo:
    properties:
      actionType:
        type: string
      contentId:
        type: string
      destinationPath:
        type: string
      eventId:
        type: string
      fileId:
        type: string
      filepath:
        type: string
      originPath:
        type: string
      parentId:
        type: string
      size:
        format: int64
        type: integer
      timestamp:
        format: int64
        type: integer
      towerId:
        type: string
    required:
    - actionType
    - eventId
    - fileId
    - parentId
    - size
    - timestamp
    - towerId
    type: object
  FileInfo:
    properties:
      childrenIds:
        items:
          type: string
        type: array
      contentId:
        type: string
      currentId:
        type: string
      hasRestoreMedia:
        type: boolean
      id:
        type: string
      isDir:
        type: boolean
      modifiable:
        type: boolean
      modifyTimestamp:
        type: integer
      owner:
        type: string
      parentId:
        type: string
      pastFile:
        type: boolean
      portablePath:
        type: string
      shareId:
        type: string
      size:
        type: integer
    type: object
  FileShareParams:
    properties:
      fileId:
        type: string
      public:
        type: boolean
      timelineOnly:
        type: boolean
      users:
        items:
          type: string
        type: array
      wormhole:
        type: boolean
    type: object
  FilesListParams:
    properties:
      fileIds:
        items:
          type: string
        type: array
    type: object
  FolderInfo:
    properties:
      children:
        items:
          $ref: '#/definitions/FileInfo'
        type: array
      medias:
        items:
          $ref: '#/definitions/MediaInfo'
        type: array
      parents:
        items:
          $ref: '#/definitions/FileInfo'
        type: array
      self:
        $ref: '#/definitions/FileInfo'
    type: object
  LoginBody:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  MediaBatchInfo:
    properties:
      Media:
        items:
          $ref: '#/definitions/MediaInfo'
        type: array
      mediaCount:
        type: integer
    type: object
  MediaBatchParams:
    properties:
      folderIds:
        example:
        - '[fId1'
        - fId2]
        items:
          type: string
        type: array
      hidden:
        enum:
        - true
        - false
        example: false
        type: boolean
      limit:
        example: 20
        type: integer
      mediaIds:
        example:
        - '[mId1'
        - mId2]
        items:
          type: string
        type: array
      page:
        example: 1
        type: integer
      raw:
        enum:
        - true
        - false
        example: false
        type: boolean
      search:
        example: ""
        type: string
      sort:
        enum:
        - createDate
        example: createDate
        type: string
      sortDirection:
        enum:
        - 1
        - -1
        example: 1
        type: integer
    type: object
  MediaIdsParams:
    properties:
      mediaIds:
        items:
          type: string
        type: array
    type: object
  MediaInfo:
    properties:
      contentId:
        description: Hash of the file content, to ensure that the same files don't
          get duplicated
        type: string
      createDate:
        type: integer
      duration:
        description: Total time, in milliseconds, of a video
        type: integer
      enabled:
        description: |-
          If the media disabled. This can happen when the backing file(s) are deleted,
          but the media stays behind because it can be re-used if needed.
        type: boolean
      fileIds:
        description: Slices of files whos content hash to the contentId
        items:
          type: string
        type: array
      height:
        type: integer
      hidden:
        description: |-
          If the media is hidden from the timeline
          TODO - make this per user
        type: boolean
      imported:
        type: boolean
      likedBy:
        items:
          type: string
        type: array
      location:
        items:
          type: number
        type: array
      mimeType:
        description: Mime-type key of the media
        type: string
      owner:
        description: User who owns the file that resulted in this media being created
        type: string
      pageCount:
        description: Number of pages (typically 1, 0 in not a valid page count)
        type: integer
      recognitionTags:
        description: Tags from the ML image scan so searching for particular objects
          in the images can be done
        items:
          type: string
        type: array
      width:
        description: Full-res image dimensions
        type: integer
    type: object
  MediaTypeInfo:
    properties:
      FileExtension:
        items:
          type: string
        type: array
      FriendlyName:
        type: string
      IsDisplayable:
        type: boolean
      IsRaw:
        type: boolean
      IsVideo:
        type: boolean
      MultiPage:
        type: boolean
      RawThumbExifKey:
        type: string
      SupportsImgRecog:
        type: boolean
      mime:
        type: string
    type: object
  MediaTypesInfo:
    properties:
      extMap:
        additionalProperties:
          $ref: '#/definitions/MediaTypeInfo'
        type: object
      mimeMap:
        additionalProperties:
          $ref: '#/definitions/MediaTypeInfo'
        type: object
    type: object
  MoveFilesParams:
    properties:
      fileIds:
        items:
          type: string
        type: array
      newParentId:
        type: string
    type: object
  NewFileParams:
    properties:
      fileSize:
        type: integer
      isDir:
        type: boolean
      newFileName:
        type: string
      parentFolderId:
        type: string
    type: object
  NewFilesInfo:
    properties:
      fileIds:
        items:
          type: string
        type: array
    type: object
  NewFilesParams:
    properties:
      newFiles:
        items:
          $ref: '#/definitions/NewFileParams'
        type: array
    type: object
  NewServerParams:
    properties:
      coreAddress:
        type: string
      name:
        type: string
      role:
        type: string
      serverId:
        type: string
      usingKey:
        type: string
    type: object
  NewUploadInfo:
    properties:
      uploadId:
        type: string
    type: object
  NewUploadParams:
    properties:
      chunkSize:
        type: integer
      rootFolderId:
        type: string
    type: object
  NewUserParams:
    properties:
      admin:
        type: boolean
      autoActivate:
        type: boolean
      fullName:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - fullName
    - password
    - username
    type: object
  PasswordUpdateParams:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    required:
    - newPassword
    type: object
  PermissionsInfo:
    properties:
      canDelete:
        type: boolean
      canDownload:
        type: boolean
      canEdit:
        type: boolean
    type: object
  PermissionsParams:
    properties:
      canDelete:
        type: boolean
      canDownload:
        type: boolean
      canEdit:
        type: boolean
    type: object
  RestoreFilesBody:
    properties:
      fileIds:
        items:
          type: string
        type: array
      newParentId:
        type: string
      timestamp:
        type: integer
    type: object
  RestoreFilesInfo:
    properties:
      newParentId:
        type: string
    type: object
  ShareInfo:
    properties:
      accessors:
        items:
          $ref: '#/definitions/UserInfo'
        type: array
      enabled:
        type: boolean
      expires:
        type: integer
      fileId:
        type: string
      owner:
        type: string
      permissions:
        additionalProperties:
          $ref: '#/definitions/PermissionsInfo'
        type: object
      public:
        type: boolean
      shareId:
        type: string
      shareName:
        type: string
      shareType:
        type: string
      timelineOnly:
        type: boolean
      updated:
        type: integer
      wormhole:
        type: boolean
    type: object
  TakeoutInfo:
    properties:
      filename:
        type: string
      single:
        type: boolean
      takeoutId:
        type: string
      taskId:
        type: string
    type: object
  TokenInfo:
    properties:
      createdBy:
        type: string
      createdTime:
        format: int64
        type: integer
      id:
        type: string
      lastUsed:
        format: int64
        type: integer
      nickname:
        type: string
      owner:
        type: string
      remoteUsing:
        type: string
      token:
        type: string
    required:
    - createdBy
    - createdTime
    - id
    - lastUsed
    - nickname
    - owner
    - remoteUsing
    - token
    type: object
  TowerInfo:
    properties:
      backupSize:
        format: int64
        type: integer
      coreAddress:
        description: |-
          Address of the remote server, only if the instance is a core.
          Not set for any remotes/backups on core server, as it IS the core
        type: string
      id:
        type: string
      lastBackup:
        format: int64
        type: integer
      name:
        type: string
      online:
        type: boolean
      reportedRole:
        description: Role the server is currently reporting. This is used to determine
          if the server is online (and functional) or not
        type: string
      role:
        description: Core or Backup
        type: string
      started:
        type: boolean
      userCount:
        type: integer
    required:
    - backupSize
    - coreAddress
    - id
    - lastBackup
    - name
    - online
    - reportedRole
    - role
    - started
    - userCount
    type: object
  UpdateFileParams:
    properties:
      newName:
        type: string
      newParentId:
        type: string
    type: object
  UserInfo:
    properties:
      activated:
        type: boolean
      fullName:
        type: string
      homeId:
        type: string
      permissionLevel:
        description: HomeSize        int64  `json:"homeSize" validate:"required"`
        type: integer
      token:
        type: string
      trashId:
        type: string
      username:
        description: TrashSize       int64  `json:"trashSize" validate:"required"`
        type: string
    required:
    - activated
    - fullName
    - homeId
    - permissionLevel
    - trashId
    - username
    type: object
  UserInfoArchive:
    properties:
      activated:
        type: boolean
      fullName:
        type: string
      homeId:
        type: string
      password:
        type: string
      permissionLevel:
        description: HomeSize        int64  `json:"homeSize" validate:"required"`
        type: integer
      token:
        type: string
      trashId:
        type: string
      username:
        description: TrashSize       int64  `json:"trashSize" validate:"required"`
        type: string
    required:
    - activated
    - fullName
    - homeId
    - permissionLevel
    - trashId
    - username
    type: object
  WeblensErrorInfo:
    properties:
      error:
        type: string
    type: object
  structs.InitServerParams:
    properties:
      coreAddress:
        type: string
      coreKey:
        type: string
      fullName:
        type: string
      localId:
        description: For restoring a server, remoind the core of its serverId and
          api key the remote last used
        type: string
      name:
        type: string
      password:
        type: string
      remoteId:
        type: string
      role:
        type: string
      username:
        type: string
      usingKeyInfo:
        type: string
    type: object
  structs.ScanBody:
    properties:
      filename:
        type: string
      folderId:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Programmatic access to the Weblens server
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Weblens API
  version: "1.0"
paths:
  /files:
    delete:
      operationId: DeleteFiles
      parameters:
      - description: Delete files request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/FilesListParams'
      - description: Delete files even if they are not in the trash
        in: query
        name: ignoreTrash
        type: boolean
      - description: Preserve parent folder if it is empty after deletion
        in: query
        name: preserveFolder
        type: boolean
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Delete Files "permanently"
      tags:
      - Files
    patch:
      operationId: MoveFiles
      parameters:
      - description: Move files request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/MoveFilesParams'
      - description: Share Id
        in: query
        name: shareId
        type: string
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Move a list of files to a new parent folder
      tags:
      - Files
  /files/{fileId}:
    get:
      operationId: GetFile
      parameters:
      - description: File Id
        in: path
        name: fileId
        required: true
        type: string
      - description: Share Id
        in: query
        name: shareId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File Info
          schema:
            $ref: '#/definitions/FileInfo'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      security:
      - SessionAuth: []
      summary: Get information about a file
      tags:
      - Files
    patch:
      consumes:
      - application/json
      operationId: UpdateFile
      parameters:
      - description: File Id
        in: path
        name: fileId
        required: true
        type: string
      - description: Share Id
        in: query
        name: shareId
        type: string
      - description: Update file request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/UpdateFileParams'
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Update a File
      tags:
      - Files
  /files/{fileId}/download:
    get:
      operationId: DownloadFile
      parameters:
      - description: File Id
        in: path
        name: fileId
        required: true
        type: string
      - description: Share Id
        in: query
        name: shareId
        type: string
      - description: File format conversion
        in: query
        name: format
        type: string
      - default: false
        description: Is this a takeout file
        enum:
        - true
        - false
        in: query
        name: isTakeout
        type: boolean
      produces:
      - application/octet-stream
      responses:
        "200":
          description: File content
          schema:
            type: string
        "404":
          description: Error Info
          schema:
            $ref: '#/definitions/WeblensErrorInfo'
      security:
      - SessionAuth: []
      summary: Download a file
      tags:
      - Files
  /files/{fileId}/history:
    get:
      operationId: GetFolderHistory
      parameters:
      - description: File Id
        in: path
        name: fileId
        required: true
        type: string
      - description: Past timestamp to view the folder at, in ms since epoch
        in: query
        name: timestamp
        required: true
        type: integer
      responses:
        "200":
          description: File actions
          schema:
            items:
              $ref: '#/definitions/FileActionInfo'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Get actions of a folder at a given time
      tags:
      - Folder
  /files/{fileId}/stats:
    get:
      operationId: GetFileStats
      parameters:
      - description: File Id
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
        "501":
          description: Not Implemented
      security:
      - SessionAuth: []
      summary: Get the statistics of a file
      tags:
      - Files
  /files/{fileId}/text:
    get:
      operationId: GetFileText
      parameters:
      - description: File Id
        in: path
        name: fileId
        required: true
        type: string
      - description: Share Id
        in: query
        name: shareId
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: File text
          schema:
            type: string
        "400":
          description: Bad Request
      security:
      - SessionAuth: []
      summary: Get the text of a text file
      tags:
      - Files
  /files/autocomplete:
    get:
      operationId: AutocompletePath
      parameters:
      - description: Search path
        in: query
        name: searchPath
        required: true
        type: string
      responses:
        "200":
          description: Path info
          schema:
            $ref: '#/definitions/FolderInfo'
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Get path completion suggestions
      tags:
      - Files
  /files/search:
    get:
      operationId: SearchByFilename
      parameters:
      - description: Filename to search for
        in: query
        name: search
        required: true
        type: string
      - description: The folder to search in, defaults to the user's home folder
        in: query
        name: baseFolderId
        type: string
      responses:
        "200":
          description: File Info
          schema:
            items:
              $ref: '#/definitions/FileInfo'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Search for files by filename
      tags:
      - Files
  /files/shared:
    get:
      operationId: GetSharedFiles
      responses:
        "200":
          description: All the top-level files shared with the user
          schema:
            $ref: '#/definitions/FolderInfo'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Get files shared with the logged in user
      tags:
      - Files
  /files/structsore:
    post:
      consumes:
      - application/json
      operationId: RestoreFiles
      parameters:
      - description: RestoreFiles files request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/RestoreFilesBody'
      produces:
      - application/json
      responses:
        "200":
          description: structsore files info
          schema:
            $ref: '#/definitions/RestoreFilesInfo'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: structsore files from some time in the past
      tags:
      - Files
  /files/untrash:
    patch:
      operationId: UnTrashFiles
      parameters:
      - description: Un-trash files request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/FilesListParams'
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Move a list of files out of the trash, structsoring them to where they
        were before
      tags:
      - Files
  /folder:
    post:
      consumes:
      - application/json
      operationId: CreateFolder
      parameters:
      - description: New folder body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CreateFolderBody'
      - description: Share Id
        in: query
        name: shareId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File Info
          schema:
            $ref: '#/definitions/FileInfo'
      security:
      - SessionAuth: []
      summary: Create a new folder
      tags:
      - Folder
  /folder/{folderId}:
    get:
      consumes:
      - application/json
      operationId: GetFolder
      parameters:
      - description: Folder Id
        in: path
        name: folderId
        required: true
        type: string
      - description: Share Id
        in: query
        name: shareId
        type: string
      - description: Past timestamp to view the folder at, in ms since epoch
        in: query
        name: timestamp
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Folder Info
          schema:
            $ref: '#/definitions/FolderInfo'
      security:
      - SessionAuth: []
      summary: Get a folder
      tags:
      - Folder
  /folder/{folderId}/cover:
    patch:
      operationId: SetFolderCover
      parameters:
      - description: Folder Id
        in: path
        name: folderId
        required: true
        type: string
      - description: Media Id
        in: query
        name: mediaId
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Set the cover image of a folder
      tags:
      - Folder
  /folder/scan:
    post:
      operationId: ScanFolder
      parameters:
      - description: Share Id
        in: query
        name: shareId
        type: string
      - description: Scan parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structs.ScanBody'
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Dispatch a folder scan
      tags:
      - Folder
  /info:
    get:
      operationId: GetServerInfo
      produces:
      - application/json
      responses:
        "200":
          description: Server info
          schema:
            $ref: '#/definitions/TowerInfo'
      summary: Get server info
      tags:
      - Towers
  /keys:
    get:
      operationId: GetApiKeys
      produces:
      - application/json
      responses:
        "200":
          description: Tokens
          schema:
            items:
              $ref: '#/definitions/TokenInfo'
            type: array
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Get all api keys
      tags:
      - ApiKeys
    post:
      operationId: CreateApiKey
      parameters:
      - description: The new token params
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/ApiKeyParams'
      produces:
      - application/json
      responses:
        "200":
          description: The new token
          schema:
            $ref: '#/definitions/TokenInfo'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Create a new api key
      tags:
      - ApiKeys
  /keys/{tokenId}:
    delete:
      operationId: DeleteApiKey
      parameters:
      - description: Api key id
        in: path
        name: tokenId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth:
        - admin
      summary: Delete an api key
      tags:
      - ApiKeys
  /media:
    post:
      operationId: GetMedia
      parameters:
      - description: Media Batch Params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/MediaBatchParams'
      - description: File ShareId
        in: query
        name: shareId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media Batch
          schema:
            $ref: '#/definitions/MediaBatchInfo'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get paginated media
      tags:
      - Media
  /media/{mediaId}.{extension}:
    get:
      operationId: GetMediaImage
      parameters:
      - description: Media Id
        in: path
        name: mediaId
        required: true
        type: string
      - description: Extension
        in: path
        name: extension
        required: true
        type: string
      - description: Image Quality
        enum:
        - thumbnail
        - fullres
        in: query
        name: quality
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - image/*
      responses:
        "200":
          description: image bytes
          schema:
            type: string
        "500":
          description: Internal Server Error
      summary: Get a media image bytes
      tags:
      - Media
  /media/{mediaId}/file:
    get:
      operationId: GetMediaFile
      parameters:
      - description: Id of media
        in: path
        name: mediaId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File info of file media was created from
          schema:
            $ref: '#/definitions/FileInfo'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      - ApiKeyAuth: []
      summary: Get file of media by id
      tags:
      - Media
  /media/{mediaId}/info:
    get:
      operationId: GetMediaInfo
      parameters:
      - description: Media Id
        in: path
        name: mediaId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media Info
          schema:
            $ref: '#/definitions/MediaInfo'
      summary: Get media info
      tags:
      - Media
  /media/{mediaId}/liked:
    patch:
      operationId: SetMediaLiked
      parameters:
      - description: Id of media
        in: path
        name: mediaId
        required: true
        type: string
      - description: ShareId
        in: query
        name: shareId
        type: string
      - description: Liked status to set
        in: query
        name: liked
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Like a media
      tags:
      - Media
  /media/{mediaId}/video:
    get:
      operationId: StreamVideo
      parameters:
      - description: Id of media
        in: path
        name: mediaId
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      - ApiKeyAuth: []
      summary: Stream a video
      tags:
      - Media
  /media/cleanup:
    post:
      operationId: CleanupMedia
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - SessionAuth:
        - admin
      - ApiKeyAuth:
        - admin
      summary: Make sure all media is correctly synced with the file system
      tags:
      - Media
  /media/drop:
    post:
      operationId: DropMedia
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - SessionAuth:
        - admin
      - ApiKeyAuth:
        - admin
      summary: DANGEROUS. Drop all computed media and clear thumbnail in-memory and
        filesystem cache. Must be server owner.
      tags:
      - Media
  /media/random:
    get:
      operationId: GetRandomMedia
      parameters:
      - description: Number of random medias to get
        in: query
        name: count
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Media Batch
          schema:
            $ref: '#/definitions/MediaBatchInfo'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get random media
      tags:
      - Media
  /media/types:
    get:
      operationId: GetMediaTypes
      produces:
      - application/json
      responses:
        "200":
          description: Media types
          schema:
            $ref: '#/definitions/MediaTypesInfo'
      summary: Get media type dictionary
      tags:
      - Media
  /media/visibility:
    patch:
      operationId: SetMediaVisibility
      parameters:
      - description: Set the media visibility
        enum:
        - true
        - false
        in: query
        name: hidden
        required: true
        type: boolean
      - description: MediaIds to change visibility of
        in: body
        name: mediaIds
        required: true
        schema:
          $ref: '#/definitions/MediaIdsParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Set media visibility
      tags:
      - Media
  /share/{shareId}:
    delete:
      operationId: DeleteFileShare
      parameters:
      - description: Share Id
        in: path
        name: shareId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      summary: Delete a file share
      tags:
      - Share
    get:
      operationId: GetFileShare
      parameters:
      - description: Share Id
        in: path
        name: shareId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File Share
          schema:
            $ref: '#/definitions/ShareInfo'
        "404":
          description: Not Found
      summary: Get a file share
      tags:
      - Share
  /share/{shareId}/accessors:
    post:
      operationId: AddUserToShare
      parameters:
      - description: Share Id
        in: path
        name: shareId
        required: true
        type: string
      - description: Share Accessors
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/AddUserParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ShareInfo'
        "404":
          description: Not Found
      summary: Add a user to a file share
      tags:
      - Share
  /share/{shareId}/accessors/{username}:
    delete:
      operationId: RemoveUserFromShare
      parameters:
      - description: Share Id
        in: path
        name: shareId
        required: true
        type: string
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ShareInfo'
        "404":
          description: Not Found
      summary: Remove a user from a file share
      tags:
      - Share
    patch:
      operationId: UpdateShareAccessorPermissions
      parameters:
      - description: Share Id
        in: path
        name: shareId
        required: true
        type: string
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Share Permissions Params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/PermissionsParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ShareInfo'
        "404":
          description: Not Found
      summary: Update a share's user permissions
      tags:
      - Share
  /share/{shareId}/public:
    patch:
      operationId: SetSharePublic
      parameters:
      - description: Share Id
        in: path
        name: shareId
        required: true
        type: string
      - description: Share Public Status
        in: query
        name: public
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      summary: Update a share's "public" status
      tags:
      - Share
  /share/file:
    post:
      operationId: CreateFileShare
      parameters:
      - description: New File Share Params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/FileShareParams'
      produces:
      - application/json
      responses:
        "200":
          description: New File Share
          schema:
            $ref: '#/definitions/ShareInfo'
        "409":
          description: Conflict
      summary: Share a file
      tags:
      - Share
  /takeout:
    post:
      description: Dispatch a task to create a zip file of the given files, or get
        the id of a previously created zip file if it already exists
      operationId: CreateTakeout
      parameters:
      - description: Share Id
        in: query
        name: shareId
        type: string
      - description: File Ids
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/FilesListParams'
      responses:
        "200":
          description: Zip Takeout Info
          schema:
            $ref: '#/definitions/TakeoutInfo'
        "202":
          description: Task Dispatch Info
          schema:
            $ref: '#/definitions/TakeoutInfo'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Create a zip file
      tags:
      - Files
  /tower:
    get:
      operationId: GetRemotes
      responses:
        "200":
          description: Tower Info
          schema:
            items:
              $ref: '#/definitions/TowerInfo'
            type: array
      security:
      - SessionAuth:
        - admin
      - ApiKeyAuth:
        - admin
      summary: Get all remotes
      tags:
      - Towers
  /tower/{serverId}:
    delete:
      operationId: DeleteRemote
      parameters:
      - description: Server Id to delete
        in: path
        name: serverId
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - SessionAuth:
        - admin
      - ApiKeyAuth:
        - admin
      summary: Delete a remote
      tags:
      - Towers
  /tower/{serverId}/backup:
    post:
      operationId: LaunchBackup
      parameters:
      - description: Server ID
        in: path
        name: serverId
        required: true
        type: string
      responses:
        "200":
          description: OK
      security:
      - SessionAuth:
        - admin
      - ApiKeyAuth:
        - admin
      summary: Launch backup on a tower
      tags:
      - Towers
  /tower/backup:
    get:
      operationId: GetBackupInfo
      parameters:
      - description: Timestamp in milliseconds since epoch
        in: query
        name: timestamp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Backup Info
          schema:
            $ref: '#/definitions/BackupInfo'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth:
        - admin
      summary: Get information about a file
      tags:
      - Towers
  /tower/init:
    post:
      operationId: InitializeTower
      parameters:
      - description: Server initialization body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structs.InitServerParams'
      produces:
      - application/json
      responses:
        "200":
          description: New server info
          schema:
            items:
              $ref: '#/definitions/TowerInfo'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security: []
      summary: Initialize the target server
      tags:
      - Towers
  /tower/remote:
    post:
      operationId: CreateRemote
      parameters:
      - description: New Server Params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/NewServerParams'
      responses:
        "201":
          description: New Server Info
          schema:
            $ref: '#/definitions/TowerInfo'
        "400":
          description: Bad Request
      security:
      - SessionAuth:
        - admin
      - ApiKeyAuth:
        - admin
      summary: Create a new remote
      tags:
      - Towers
  /tower/reset:
    post:
      operationId: ResetTower
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth:
        - admin
      - ApiKeyAuth:
        - admin
      summary: Reset tower
      tags:
      - Towers
  /upload:
    post:
      operationId: StartUpload
      parameters:
      - description: New upload request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/NewUploadParams'
      - description: Share Id
        in: query
        name: shareId
        type: string
      responses:
        "201":
          description: Upload Info
          schema:
            $ref: '#/definitions/NewUploadInfo'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Begin a new upload task
      tags:
      - Files
  /upload/{uploadId}:
    get:
      operationId: GetUploadResult
      parameters:
      - description: Upload Id
        in: path
        name: uploadId
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Get the result of an upload task. This will block until the upload
        is complete
      tags:
      - Files
    post:
      operationId: AddFilesToUpload
      parameters:
      - description: Upload Id
        in: path
        name: uploadId
        required: true
        type: string
      - description: Share Id
        in: query
        name: shareId
        type: string
      - description: New file params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/NewFilesParams'
      responses:
        "201":
          description: FileIds
          schema:
            $ref: '#/definitions/NewFilesInfo'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Add a file to an upload task
      tags:
      - Files
  /upload/{uploadId}/file/{fileId}:
    put:
      operationId: UploadFileChunk
      parameters:
      - description: Upload Id
        in: path
        name: uploadId
        required: true
        type: string
      - description: File Id
        in: path
        name: fileId
        required: true
        type: string
      - description: Share Id
        in: query
        name: shareId
        type: string
      - description: File chunk
        in: formData
        name: chunk
        required: true
        type: file
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Add a chunk to a file upload
      tags:
      - Files
  /users:
    get:
      operationId: GetUsers
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/UserInfoArchive'
            type: array
        "401":
          description: Unauthorized
      security:
      - SessionAuth:
        - admin
      summary: Get all users, including (possibly) sensitive information like password
        hashes
      tags:
      - Users
    post:
      operationId: CreateUser
      parameters:
      - description: New user params
        in: body
        name: newUserParams
        required: true
        schema:
          $ref: '#/definitions/NewUserParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Create a new user
      tags:
      - Users
  /users/{username}:
    delete:
      operationId: DeleteUser
      parameters:
      - description: Username of user to delete
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth:
        - Admin
      - ApiKeyAuth:
        - Admin
      summary: Delete a user
      tags:
      - Users
    head:
      operationId: CheckExists
      parameters:
      - description: Username of user to check
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Check if username is already taken
      tags:
      - Users
  /users/{username}/active:
    patch:
      operationId: ActivateUser
      parameters:
      - description: Username of user to update
        in: path
        name: username
        required: true
        type: string
      - description: Target activation status
        in: query
        name: setActive
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/WeblensErrorInfo'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      security:
      - SessionAuth: []
      - ApiKeyAuth: []
      summary: Update active status of user
      tags:
      - Users
  /users/{username}/admin:
    patch:
      operationId: SetUserAdmin
      parameters:
      - description: Username of user to update
        in: path
        name: username
        required: true
        type: string
      - description: Target admin status
        in: query
        name: setAdmin
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/WeblensErrorInfo'
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - SessionAuth: []
      - ApiKeyAuth: []
      summary: Update admin status of user
      tags:
      - Users
  /users/{username}/fullName:
    patch:
      operationId: ChangeDisplayName
      parameters:
      - description: Username of user to update
        in: path
        name: username
        required: true
        type: string
      - description: New full name of user
        in: query
        name: newFullName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/WeblensErrorInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/WeblensErrorInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/WeblensErrorInfo'
      security:
      - SessionAuth: []
      - ApiKeyAuth: []
      summary: Update display name of a user
      tags:
      - Users
  /users/{username}/password:
    patch:
      operationId: UpdateUserPassword
      parameters:
      - description: Username of user to update
        in: path
        name: username
        required: true
        type: string
      - description: Password update params
        in: body
        name: passwordUpdateParams
        required: true
        schema:
          $ref: '#/definitions/PasswordUpdateParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Both oldPassword and newPassword fields are required
          schema:
            $ref: '#/definitions/WeblensErrorInfo'
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - SessionAuth: []
      - ApiKeyAuth: []
      summary: Update user password
      tags:
      - Users
  /users/auth:
    post:
      operationId: LoginUser
      parameters:
      - description: Login params
        in: body
        name: loginParams
        required: true
        schema:
          $ref: '#/definitions/LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: Logged-in users info
          schema:
            $ref: '#/definitions/UserInfo'
        "401":
          description: Unauthorized
      summary: Login User
      tags:
      - Users
  /users/logout:
    post:
      operationId: LogoutUser
      responses:
        "200":
          description: OK
      security:
      - SessionAuth: []
      summary: Logout User
      tags:
      - Users
  /users/me:
    get:
      operationId: GetUser
      produces:
      - application/json
      responses:
        "200":
          description: Logged-in users info
          schema:
            $ref: '#/definitions/UserInfo'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Gets the user based on the auth token
      tags:
      - Users
  /users/search:
    get:
      operationId: SearchUsers
      parameters:
      - description: Partial username to search for
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/UserInfo'
            type: array
        "400":
          description: Username autocomplete must contain at least 2 characters
          schema:
            $ref: '#/definitions/WeblensErrorInfo'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - SessionAuth: []
      summary: Search for users by username
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    scopes:
      admin: Grants read and write access to privileged data
    type: apiKey
  SessionAuth:
    in: cookie
    name: weblens-session-token
    type: apiKey
swagger: "2.0"
