/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskInfo{}

// TaskInfo struct for TaskInfo
type TaskInfo struct {
	Completed bool `json:"Completed"`
	JobName string `json:"jobName"`
	Progress int32 `json:"progress"`
	Result map[string]interface{} `json:"result,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
	Status TaskTaskExitStatus `json:"status"`
	TaskId string `json:"taskId"`
	WorkerId int32 `json:"workerId"`
}

type _TaskInfo TaskInfo

// NewTaskInfo instantiates a new TaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskInfo(completed bool, jobName string, progress int32, status TaskTaskExitStatus, taskId string, workerId int32) *TaskInfo {
	this := TaskInfo{}
	this.Completed = completed
	this.JobName = jobName
	this.Progress = progress
	this.Status = status
	this.TaskId = taskId
	this.WorkerId = workerId
	return &this
}

// NewTaskInfoWithDefaults instantiates a new TaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskInfoWithDefaults() *TaskInfo {
	this := TaskInfo{}
	return &this
}

// GetCompleted returns the Completed field value
func (o *TaskInfo) GetCompleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetCompletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *TaskInfo) SetCompleted(v bool) {
	o.Completed = v
}

// GetJobName returns the JobName field value
func (o *TaskInfo) GetJobName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobName
}

// GetJobNameOk returns a tuple with the JobName field value
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetJobNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobName, true
}

// SetJobName sets field value
func (o *TaskInfo) SetJobName(v string) {
	o.JobName = v
}

// GetProgress returns the Progress field value
func (o *TaskInfo) GetProgress() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Progress
}

// GetProgressOk returns a tuple with the Progress field value
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetProgressOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Progress, true
}

// SetProgress sets field value
func (o *TaskInfo) SetProgress(v int32) {
	o.Progress = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TaskInfo) GetResult() map[string]interface{} {
	if o == nil || IsNil(o.Result) {
		var ret map[string]interface{}
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetResultOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return map[string]interface{}{}, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TaskInfo) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given map[string]interface{} and assigns it to the Result field.
func (o *TaskInfo) SetResult(v map[string]interface{}) {
	o.Result = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *TaskInfo) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *TaskInfo) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *TaskInfo) SetStartTime(v string) {
	o.StartTime = &v
}

// GetStatus returns the Status field value
func (o *TaskInfo) GetStatus() TaskTaskExitStatus {
	if o == nil {
		var ret TaskTaskExitStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetStatusOk() (*TaskTaskExitStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TaskInfo) SetStatus(v TaskTaskExitStatus) {
	o.Status = v
}

// GetTaskId returns the TaskId field value
func (o *TaskInfo) GetTaskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskId, true
}

// SetTaskId sets field value
func (o *TaskInfo) SetTaskId(v string) {
	o.TaskId = v
}

// GetWorkerId returns the WorkerId field value
func (o *TaskInfo) GetWorkerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetWorkerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkerId, true
}

// SetWorkerId sets field value
func (o *TaskInfo) SetWorkerId(v int32) {
	o.WorkerId = v
}

func (o TaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Completed"] = o.Completed
	toSerialize["jobName"] = o.JobName
	toSerialize["progress"] = o.Progress
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	toSerialize["status"] = o.Status
	toSerialize["taskId"] = o.TaskId
	toSerialize["workerId"] = o.WorkerId
	return toSerialize, nil
}

func (o *TaskInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Completed",
		"jobName",
		"progress",
		"status",
		"taskId",
		"workerId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskInfo := _TaskInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskInfo)

	if err != nil {
		return err
	}

	*o = TaskInfo(varTaskInfo)

	return err
}

type NullableTaskInfo struct {
	value *TaskInfo
	isSet bool
}

func (v NullableTaskInfo) Get() *TaskInfo {
	return v.value
}

func (v *NullableTaskInfo) Set(val *TaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskInfo(val *TaskInfo) *NullableTaskInfo {
	return &NullableTaskInfo{value: val, isSet: true}
}

func (v NullableTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


