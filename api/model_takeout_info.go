/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TakeoutInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TakeoutInfo{}

// TakeoutInfo struct for TakeoutInfo
type TakeoutInfo struct {
	Filename *string `json:"filename,omitempty"`
	Single *bool `json:"single,omitempty"`
	TakeoutId *string `json:"takeoutId,omitempty"`
	TaskId *string `json:"taskId,omitempty"`
}

// NewTakeoutInfo instantiates a new TakeoutInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTakeoutInfo() *TakeoutInfo {
	this := TakeoutInfo{}
	return &this
}

// NewTakeoutInfoWithDefaults instantiates a new TakeoutInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTakeoutInfoWithDefaults() *TakeoutInfo {
	this := TakeoutInfo{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *TakeoutInfo) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TakeoutInfo) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *TakeoutInfo) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *TakeoutInfo) SetFilename(v string) {
	o.Filename = &v
}

// GetSingle returns the Single field value if set, zero value otherwise.
func (o *TakeoutInfo) GetSingle() bool {
	if o == nil || IsNil(o.Single) {
		var ret bool
		return ret
	}
	return *o.Single
}

// GetSingleOk returns a tuple with the Single field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TakeoutInfo) GetSingleOk() (*bool, bool) {
	if o == nil || IsNil(o.Single) {
		return nil, false
	}
	return o.Single, true
}

// HasSingle returns a boolean if a field has been set.
func (o *TakeoutInfo) HasSingle() bool {
	if o != nil && !IsNil(o.Single) {
		return true
	}

	return false
}

// SetSingle gets a reference to the given bool and assigns it to the Single field.
func (o *TakeoutInfo) SetSingle(v bool) {
	o.Single = &v
}

// GetTakeoutId returns the TakeoutId field value if set, zero value otherwise.
func (o *TakeoutInfo) GetTakeoutId() string {
	if o == nil || IsNil(o.TakeoutId) {
		var ret string
		return ret
	}
	return *o.TakeoutId
}

// GetTakeoutIdOk returns a tuple with the TakeoutId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TakeoutInfo) GetTakeoutIdOk() (*string, bool) {
	if o == nil || IsNil(o.TakeoutId) {
		return nil, false
	}
	return o.TakeoutId, true
}

// HasTakeoutId returns a boolean if a field has been set.
func (o *TakeoutInfo) HasTakeoutId() bool {
	if o != nil && !IsNil(o.TakeoutId) {
		return true
	}

	return false
}

// SetTakeoutId gets a reference to the given string and assigns it to the TakeoutId field.
func (o *TakeoutInfo) SetTakeoutId(v string) {
	o.TakeoutId = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *TakeoutInfo) GetTaskId() string {
	if o == nil || IsNil(o.TaskId) {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TakeoutInfo) GetTaskIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *TakeoutInfo) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *TakeoutInfo) SetTaskId(v string) {
	o.TaskId = &v
}

func (o TakeoutInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TakeoutInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Single) {
		toSerialize["single"] = o.Single
	}
	if !IsNil(o.TakeoutId) {
		toSerialize["takeoutId"] = o.TakeoutId
	}
	if !IsNil(o.TaskId) {
		toSerialize["taskId"] = o.TaskId
	}
	return toSerialize, nil
}

type NullableTakeoutInfo struct {
	value *TakeoutInfo
	isSet bool
}

func (v NullableTakeoutInfo) Get() *TakeoutInfo {
	return v.value
}

func (v *NullableTakeoutInfo) Set(val *TakeoutInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTakeoutInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTakeoutInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTakeoutInfo(val *TakeoutInfo) *NullableTakeoutInfo {
	return &NullableTakeoutInfo{value: val, isSet: true}
}

func (v NullableTakeoutInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTakeoutInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


