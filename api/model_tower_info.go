/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TowerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TowerInfo{}

// TowerInfo struct for TowerInfo
type TowerInfo struct {
	BackupSize int64 `json:"backupSize"`
	// Address of the remote server, only if the instance is a core. Not set for any remotes/backups on core server, as it IS the core
	CoreAddress string `json:"coreAddress"`
	Id string `json:"id"`
	LastBackup int64 `json:"lastBackup"`
	Name string `json:"name"`
	Online bool `json:"online"`
	// Role the server is currently reporting. This is used to determine if the server is online (and functional) or not
	ReportedRole string `json:"reportedRole"`
	// Core or Backup
	Role string `json:"role"`
	Started bool `json:"started"`
	UserCount int32 `json:"userCount"`
}

type _TowerInfo TowerInfo

// NewTowerInfo instantiates a new TowerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTowerInfo(backupSize int64, coreAddress string, id string, lastBackup int64, name string, online bool, reportedRole string, role string, started bool, userCount int32) *TowerInfo {
	this := TowerInfo{}
	this.BackupSize = backupSize
	this.CoreAddress = coreAddress
	this.Id = id
	this.LastBackup = lastBackup
	this.Name = name
	this.Online = online
	this.ReportedRole = reportedRole
	this.Role = role
	this.Started = started
	this.UserCount = userCount
	return &this
}

// NewTowerInfoWithDefaults instantiates a new TowerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTowerInfoWithDefaults() *TowerInfo {
	this := TowerInfo{}
	return &this
}

// GetBackupSize returns the BackupSize field value
func (o *TowerInfo) GetBackupSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BackupSize
}

// GetBackupSizeOk returns a tuple with the BackupSize field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetBackupSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupSize, true
}

// SetBackupSize sets field value
func (o *TowerInfo) SetBackupSize(v int64) {
	o.BackupSize = v
}

// GetCoreAddress returns the CoreAddress field value
func (o *TowerInfo) GetCoreAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CoreAddress
}

// GetCoreAddressOk returns a tuple with the CoreAddress field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetCoreAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CoreAddress, true
}

// SetCoreAddress sets field value
func (o *TowerInfo) SetCoreAddress(v string) {
	o.CoreAddress = v
}

// GetId returns the Id field value
func (o *TowerInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TowerInfo) SetId(v string) {
	o.Id = v
}

// GetLastBackup returns the LastBackup field value
func (o *TowerInfo) GetLastBackup() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastBackup
}

// GetLastBackupOk returns a tuple with the LastBackup field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetLastBackupOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastBackup, true
}

// SetLastBackup sets field value
func (o *TowerInfo) SetLastBackup(v int64) {
	o.LastBackup = v
}

// GetName returns the Name field value
func (o *TowerInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TowerInfo) SetName(v string) {
	o.Name = v
}

// GetOnline returns the Online field value
func (o *TowerInfo) GetOnline() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Online
}

// GetOnlineOk returns a tuple with the Online field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetOnlineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Online, true
}

// SetOnline sets field value
func (o *TowerInfo) SetOnline(v bool) {
	o.Online = v
}

// GetReportedRole returns the ReportedRole field value
func (o *TowerInfo) GetReportedRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportedRole
}

// GetReportedRoleOk returns a tuple with the ReportedRole field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetReportedRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportedRole, true
}

// SetReportedRole sets field value
func (o *TowerInfo) SetReportedRole(v string) {
	o.ReportedRole = v
}

// GetRole returns the Role field value
func (o *TowerInfo) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *TowerInfo) SetRole(v string) {
	o.Role = v
}

// GetStarted returns the Started field value
func (o *TowerInfo) GetStarted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Started
}

// GetStartedOk returns a tuple with the Started field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetStartedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Started, true
}

// SetStarted sets field value
func (o *TowerInfo) SetStarted(v bool) {
	o.Started = v
}

// GetUserCount returns the UserCount field value
func (o *TowerInfo) GetUserCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value
// and a boolean to check if the value has been set.
func (o *TowerInfo) GetUserCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserCount, true
}

// SetUserCount sets field value
func (o *TowerInfo) SetUserCount(v int32) {
	o.UserCount = v
}

func (o TowerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TowerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backupSize"] = o.BackupSize
	toSerialize["coreAddress"] = o.CoreAddress
	toSerialize["id"] = o.Id
	toSerialize["lastBackup"] = o.LastBackup
	toSerialize["name"] = o.Name
	toSerialize["online"] = o.Online
	toSerialize["reportedRole"] = o.ReportedRole
	toSerialize["role"] = o.Role
	toSerialize["started"] = o.Started
	toSerialize["userCount"] = o.UserCount
	return toSerialize, nil
}

func (o *TowerInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backupSize",
		"coreAddress",
		"id",
		"lastBackup",
		"name",
		"online",
		"reportedRole",
		"role",
		"started",
		"userCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTowerInfo := _TowerInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTowerInfo)

	if err != nil {
		return err
	}

	*o = TowerInfo(varTowerInfo)

	return err
}

type NullableTowerInfo struct {
	value *TowerInfo
	isSet bool
}

func (v NullableTowerInfo) Get() *TowerInfo {
	return v.value
}

func (v *NullableTowerInfo) Set(val *TowerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTowerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTowerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTowerInfo(val *TowerInfo) *NullableTowerInfo {
	return &NullableTowerInfo{value: val, isSet: true}
}

func (v NullableTowerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTowerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


