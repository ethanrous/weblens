/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MediaBatchParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaBatchParams{}

// MediaBatchParams struct for MediaBatchParams
type MediaBatchParams struct {
	FolderIds []string `json:"folderIds,omitempty"`
	Hidden *bool `json:"hidden,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	MediaIds []string `json:"mediaIds,omitempty"`
	Page *int32 `json:"page,omitempty"`
	Raw *bool `json:"raw,omitempty"`
	Search *string `json:"search,omitempty"`
	Sort *string `json:"sort,omitempty"`
	SortDirection *int32 `json:"sortDirection,omitempty"`
}

// NewMediaBatchParams instantiates a new MediaBatchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaBatchParams() *MediaBatchParams {
	this := MediaBatchParams{}
	return &this
}

// NewMediaBatchParamsWithDefaults instantiates a new MediaBatchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaBatchParamsWithDefaults() *MediaBatchParams {
	this := MediaBatchParams{}
	return &this
}

// GetFolderIds returns the FolderIds field value if set, zero value otherwise.
func (o *MediaBatchParams) GetFolderIds() []string {
	if o == nil || IsNil(o.FolderIds) {
		var ret []string
		return ret
	}
	return o.FolderIds
}

// GetFolderIdsOk returns a tuple with the FolderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchParams) GetFolderIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FolderIds) {
		return nil, false
	}
	return o.FolderIds, true
}

// HasFolderIds returns a boolean if a field has been set.
func (o *MediaBatchParams) HasFolderIds() bool {
	if o != nil && !IsNil(o.FolderIds) {
		return true
	}

	return false
}

// SetFolderIds gets a reference to the given []string and assigns it to the FolderIds field.
func (o *MediaBatchParams) SetFolderIds(v []string) {
	o.FolderIds = v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *MediaBatchParams) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchParams) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *MediaBatchParams) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *MediaBatchParams) SetHidden(v bool) {
	o.Hidden = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *MediaBatchParams) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchParams) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *MediaBatchParams) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *MediaBatchParams) SetLimit(v int32) {
	o.Limit = &v
}

// GetMediaIds returns the MediaIds field value if set, zero value otherwise.
func (o *MediaBatchParams) GetMediaIds() []string {
	if o == nil || IsNil(o.MediaIds) {
		var ret []string
		return ret
	}
	return o.MediaIds
}

// GetMediaIdsOk returns a tuple with the MediaIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchParams) GetMediaIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MediaIds) {
		return nil, false
	}
	return o.MediaIds, true
}

// HasMediaIds returns a boolean if a field has been set.
func (o *MediaBatchParams) HasMediaIds() bool {
	if o != nil && !IsNil(o.MediaIds) {
		return true
	}

	return false
}

// SetMediaIds gets a reference to the given []string and assigns it to the MediaIds field.
func (o *MediaBatchParams) SetMediaIds(v []string) {
	o.MediaIds = v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *MediaBatchParams) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchParams) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *MediaBatchParams) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *MediaBatchParams) SetPage(v int32) {
	o.Page = &v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *MediaBatchParams) GetRaw() bool {
	if o == nil || IsNil(o.Raw) {
		var ret bool
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchParams) GetRawOk() (*bool, bool) {
	if o == nil || IsNil(o.Raw) {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *MediaBatchParams) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given bool and assigns it to the Raw field.
func (o *MediaBatchParams) SetRaw(v bool) {
	o.Raw = &v
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *MediaBatchParams) GetSearch() string {
	if o == nil || IsNil(o.Search) {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchParams) GetSearchOk() (*string, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *MediaBatchParams) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *MediaBatchParams) SetSearch(v string) {
	o.Search = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *MediaBatchParams) GetSort() string {
	if o == nil || IsNil(o.Sort) {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchParams) GetSortOk() (*string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *MediaBatchParams) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *MediaBatchParams) SetSort(v string) {
	o.Sort = &v
}

// GetSortDirection returns the SortDirection field value if set, zero value otherwise.
func (o *MediaBatchParams) GetSortDirection() int32 {
	if o == nil || IsNil(o.SortDirection) {
		var ret int32
		return ret
	}
	return *o.SortDirection
}

// GetSortDirectionOk returns a tuple with the SortDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchParams) GetSortDirectionOk() (*int32, bool) {
	if o == nil || IsNil(o.SortDirection) {
		return nil, false
	}
	return o.SortDirection, true
}

// HasSortDirection returns a boolean if a field has been set.
func (o *MediaBatchParams) HasSortDirection() bool {
	if o != nil && !IsNil(o.SortDirection) {
		return true
	}

	return false
}

// SetSortDirection gets a reference to the given int32 and assigns it to the SortDirection field.
func (o *MediaBatchParams) SetSortDirection(v int32) {
	o.SortDirection = &v
}

func (o MediaBatchParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaBatchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FolderIds) {
		toSerialize["folderIds"] = o.FolderIds
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.MediaIds) {
		toSerialize["mediaIds"] = o.MediaIds
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.SortDirection) {
		toSerialize["sortDirection"] = o.SortDirection
	}
	return toSerialize, nil
}

type NullableMediaBatchParams struct {
	value *MediaBatchParams
	isSet bool
}

func (v NullableMediaBatchParams) Get() *MediaBatchParams {
	return v.value
}

func (v *NullableMediaBatchParams) Set(val *MediaBatchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaBatchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaBatchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaBatchParams(val *MediaBatchParams) *NullableMediaBatchParams {
	return &NullableMediaBatchParams{value: val, isSet: true}
}

func (v NullableMediaBatchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaBatchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


