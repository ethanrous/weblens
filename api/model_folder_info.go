/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FolderInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderInfo{}

// FolderInfo struct for FolderInfo
type FolderInfo struct {
	Children []FileInfo `json:"children,omitempty"`
	Medias []MediaInfo `json:"medias,omitempty"`
	Parents []FileInfo `json:"parents,omitempty"`
	Self *FileInfo `json:"self,omitempty"`
}

// NewFolderInfo instantiates a new FolderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderInfo() *FolderInfo {
	this := FolderInfo{}
	return &this
}

// NewFolderInfoWithDefaults instantiates a new FolderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderInfoWithDefaults() *FolderInfo {
	this := FolderInfo{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *FolderInfo) GetChildren() []FileInfo {
	if o == nil || IsNil(o.Children) {
		var ret []FileInfo
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderInfo) GetChildrenOk() ([]FileInfo, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *FolderInfo) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []FileInfo and assigns it to the Children field.
func (o *FolderInfo) SetChildren(v []FileInfo) {
	o.Children = v
}

// GetMedias returns the Medias field value if set, zero value otherwise.
func (o *FolderInfo) GetMedias() []MediaInfo {
	if o == nil || IsNil(o.Medias) {
		var ret []MediaInfo
		return ret
	}
	return o.Medias
}

// GetMediasOk returns a tuple with the Medias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderInfo) GetMediasOk() ([]MediaInfo, bool) {
	if o == nil || IsNil(o.Medias) {
		return nil, false
	}
	return o.Medias, true
}

// HasMedias returns a boolean if a field has been set.
func (o *FolderInfo) HasMedias() bool {
	if o != nil && !IsNil(o.Medias) {
		return true
	}

	return false
}

// SetMedias gets a reference to the given []MediaInfo and assigns it to the Medias field.
func (o *FolderInfo) SetMedias(v []MediaInfo) {
	o.Medias = v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *FolderInfo) GetParents() []FileInfo {
	if o == nil || IsNil(o.Parents) {
		var ret []FileInfo
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderInfo) GetParentsOk() ([]FileInfo, bool) {
	if o == nil || IsNil(o.Parents) {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *FolderInfo) HasParents() bool {
	if o != nil && !IsNil(o.Parents) {
		return true
	}

	return false
}

// SetParents gets a reference to the given []FileInfo and assigns it to the Parents field.
func (o *FolderInfo) SetParents(v []FileInfo) {
	o.Parents = v
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *FolderInfo) GetSelf() FileInfo {
	if o == nil || IsNil(o.Self) {
		var ret FileInfo
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderInfo) GetSelfOk() (*FileInfo, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *FolderInfo) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given FileInfo and assigns it to the Self field.
func (o *FolderInfo) SetSelf(v FileInfo) {
	o.Self = &v
}

func (o FolderInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Medias) {
		toSerialize["medias"] = o.Medias
	}
	if !IsNil(o.Parents) {
		toSerialize["parents"] = o.Parents
	}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	return toSerialize, nil
}

type NullableFolderInfo struct {
	value *FolderInfo
	isSet bool
}

func (v NullableFolderInfo) Get() *FolderInfo {
	return v.value
}

func (v *NullableFolderInfo) Set(val *FolderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderInfo(val *FolderInfo) *NullableFolderInfo {
	return &NullableFolderInfo{value: val, isSet: true}
}

func (v NullableFolderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


