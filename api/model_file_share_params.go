/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileShareParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileShareParams{}

// FileShareParams struct for FileShareParams
type FileShareParams struct {
	FileId *string `json:"fileId,omitempty"`
	Public *bool `json:"public,omitempty"`
	TimelineOnly *bool `json:"timelineOnly,omitempty"`
	Users []string `json:"users,omitempty"`
	Wormhole *bool `json:"wormhole,omitempty"`
}

// NewFileShareParams instantiates a new FileShareParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileShareParams() *FileShareParams {
	this := FileShareParams{}
	return &this
}

// NewFileShareParamsWithDefaults instantiates a new FileShareParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileShareParamsWithDefaults() *FileShareParams {
	this := FileShareParams{}
	return &this
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *FileShareParams) GetFileId() string {
	if o == nil || IsNil(o.FileId) {
		var ret string
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileShareParams) GetFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.FileId) {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *FileShareParams) HasFileId() bool {
	if o != nil && !IsNil(o.FileId) {
		return true
	}

	return false
}

// SetFileId gets a reference to the given string and assigns it to the FileId field.
func (o *FileShareParams) SetFileId(v string) {
	o.FileId = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *FileShareParams) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileShareParams) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *FileShareParams) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *FileShareParams) SetPublic(v bool) {
	o.Public = &v
}

// GetTimelineOnly returns the TimelineOnly field value if set, zero value otherwise.
func (o *FileShareParams) GetTimelineOnly() bool {
	if o == nil || IsNil(o.TimelineOnly) {
		var ret bool
		return ret
	}
	return *o.TimelineOnly
}

// GetTimelineOnlyOk returns a tuple with the TimelineOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileShareParams) GetTimelineOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.TimelineOnly) {
		return nil, false
	}
	return o.TimelineOnly, true
}

// HasTimelineOnly returns a boolean if a field has been set.
func (o *FileShareParams) HasTimelineOnly() bool {
	if o != nil && !IsNil(o.TimelineOnly) {
		return true
	}

	return false
}

// SetTimelineOnly gets a reference to the given bool and assigns it to the TimelineOnly field.
func (o *FileShareParams) SetTimelineOnly(v bool) {
	o.TimelineOnly = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *FileShareParams) GetUsers() []string {
	if o == nil || IsNil(o.Users) {
		var ret []string
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileShareParams) GetUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *FileShareParams) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *FileShareParams) SetUsers(v []string) {
	o.Users = v
}

// GetWormhole returns the Wormhole field value if set, zero value otherwise.
func (o *FileShareParams) GetWormhole() bool {
	if o == nil || IsNil(o.Wormhole) {
		var ret bool
		return ret
	}
	return *o.Wormhole
}

// GetWormholeOk returns a tuple with the Wormhole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileShareParams) GetWormholeOk() (*bool, bool) {
	if o == nil || IsNil(o.Wormhole) {
		return nil, false
	}
	return o.Wormhole, true
}

// HasWormhole returns a boolean if a field has been set.
func (o *FileShareParams) HasWormhole() bool {
	if o != nil && !IsNil(o.Wormhole) {
		return true
	}

	return false
}

// SetWormhole gets a reference to the given bool and assigns it to the Wormhole field.
func (o *FileShareParams) SetWormhole(v bool) {
	o.Wormhole = &v
}

func (o FileShareParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileShareParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileId) {
		toSerialize["fileId"] = o.FileId
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.TimelineOnly) {
		toSerialize["timelineOnly"] = o.TimelineOnly
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Wormhole) {
		toSerialize["wormhole"] = o.Wormhole
	}
	return toSerialize, nil
}

type NullableFileShareParams struct {
	value *FileShareParams
	isSet bool
}

func (v NullableFileShareParams) Get() *FileShareParams {
	return v.value
}

func (v *NullableFileShareParams) Set(val *FileShareParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFileShareParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFileShareParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileShareParams(val *FileShareParams) *NullableFileShareParams {
	return &NullableFileShareParams{value: val, isSet: true}
}

func (v NullableFileShareParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileShareParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


