/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NewUploadParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewUploadParams{}

// NewUploadParams struct for NewUploadParams
type NewUploadParams struct {
	ChunkSize *int32 `json:"chunkSize,omitempty"`
	RootFolderId *string `json:"rootFolderId,omitempty"`
}

// NewNewUploadParams instantiates a new NewUploadParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewUploadParams() *NewUploadParams {
	this := NewUploadParams{}
	return &this
}

// NewNewUploadParamsWithDefaults instantiates a new NewUploadParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewUploadParamsWithDefaults() *NewUploadParams {
	this := NewUploadParams{}
	return &this
}

// GetChunkSize returns the ChunkSize field value if set, zero value otherwise.
func (o *NewUploadParams) GetChunkSize() int32 {
	if o == nil || IsNil(o.ChunkSize) {
		var ret int32
		return ret
	}
	return *o.ChunkSize
}

// GetChunkSizeOk returns a tuple with the ChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUploadParams) GetChunkSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.ChunkSize) {
		return nil, false
	}
	return o.ChunkSize, true
}

// HasChunkSize returns a boolean if a field has been set.
func (o *NewUploadParams) HasChunkSize() bool {
	if o != nil && !IsNil(o.ChunkSize) {
		return true
	}

	return false
}

// SetChunkSize gets a reference to the given int32 and assigns it to the ChunkSize field.
func (o *NewUploadParams) SetChunkSize(v int32) {
	o.ChunkSize = &v
}

// GetRootFolderId returns the RootFolderId field value if set, zero value otherwise.
func (o *NewUploadParams) GetRootFolderId() string {
	if o == nil || IsNil(o.RootFolderId) {
		var ret string
		return ret
	}
	return *o.RootFolderId
}

// GetRootFolderIdOk returns a tuple with the RootFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUploadParams) GetRootFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.RootFolderId) {
		return nil, false
	}
	return o.RootFolderId, true
}

// HasRootFolderId returns a boolean if a field has been set.
func (o *NewUploadParams) HasRootFolderId() bool {
	if o != nil && !IsNil(o.RootFolderId) {
		return true
	}

	return false
}

// SetRootFolderId gets a reference to the given string and assigns it to the RootFolderId field.
func (o *NewUploadParams) SetRootFolderId(v string) {
	o.RootFolderId = &v
}

func (o NewUploadParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewUploadParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChunkSize) {
		toSerialize["chunkSize"] = o.ChunkSize
	}
	if !IsNil(o.RootFolderId) {
		toSerialize["rootFolderId"] = o.RootFolderId
	}
	return toSerialize, nil
}

type NullableNewUploadParams struct {
	value *NewUploadParams
	isSet bool
}

func (v NullableNewUploadParams) Get() *NewUploadParams {
	return v.value
}

func (v *NullableNewUploadParams) Set(val *NewUploadParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNewUploadParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNewUploadParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewUploadParams(val *NewUploadParams) *NullableNewUploadParams {
	return &NullableNewUploadParams{value: val, isSet: true}
}

func (v NullableNewUploadParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewUploadParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


