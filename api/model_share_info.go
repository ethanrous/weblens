/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ShareInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShareInfo{}

// ShareInfo struct for ShareInfo
type ShareInfo struct {
	Accessors []UserInfo `json:"accessors,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Expires *int32 `json:"expires,omitempty"`
	FileId *string `json:"fileId,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Permissions *map[string]PermissionsInfo `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	ShareId *string `json:"shareId,omitempty"`
	ShareName *string `json:"shareName,omitempty"`
	ShareType *string `json:"shareType,omitempty"`
	TimelineOnly *bool `json:"timelineOnly,omitempty"`
	Updated *int32 `json:"updated,omitempty"`
	Wormhole *bool `json:"wormhole,omitempty"`
}

// NewShareInfo instantiates a new ShareInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareInfo() *ShareInfo {
	this := ShareInfo{}
	return &this
}

// NewShareInfoWithDefaults instantiates a new ShareInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareInfoWithDefaults() *ShareInfo {
	this := ShareInfo{}
	return &this
}

// GetAccessors returns the Accessors field value if set, zero value otherwise.
func (o *ShareInfo) GetAccessors() []UserInfo {
	if o == nil || IsNil(o.Accessors) {
		var ret []UserInfo
		return ret
	}
	return o.Accessors
}

// GetAccessorsOk returns a tuple with the Accessors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetAccessorsOk() ([]UserInfo, bool) {
	if o == nil || IsNil(o.Accessors) {
		return nil, false
	}
	return o.Accessors, true
}

// HasAccessors returns a boolean if a field has been set.
func (o *ShareInfo) HasAccessors() bool {
	if o != nil && !IsNil(o.Accessors) {
		return true
	}

	return false
}

// SetAccessors gets a reference to the given []UserInfo and assigns it to the Accessors field.
func (o *ShareInfo) SetAccessors(v []UserInfo) {
	o.Accessors = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ShareInfo) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ShareInfo) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ShareInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *ShareInfo) GetExpires() int32 {
	if o == nil || IsNil(o.Expires) {
		var ret int32
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetExpiresOk() (*int32, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *ShareInfo) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given int32 and assigns it to the Expires field.
func (o *ShareInfo) SetExpires(v int32) {
	o.Expires = &v
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *ShareInfo) GetFileId() string {
	if o == nil || IsNil(o.FileId) {
		var ret string
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.FileId) {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *ShareInfo) HasFileId() bool {
	if o != nil && !IsNil(o.FileId) {
		return true
	}

	return false
}

// SetFileId gets a reference to the given string and assigns it to the FileId field.
func (o *ShareInfo) SetFileId(v string) {
	o.FileId = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ShareInfo) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ShareInfo) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *ShareInfo) SetOwner(v string) {
	o.Owner = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ShareInfo) GetPermissions() map[string]PermissionsInfo {
	if o == nil || IsNil(o.Permissions) {
		var ret map[string]PermissionsInfo
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetPermissionsOk() (*map[string]PermissionsInfo, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ShareInfo) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given map[string]PermissionsInfo and assigns it to the Permissions field.
func (o *ShareInfo) SetPermissions(v map[string]PermissionsInfo) {
	o.Permissions = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *ShareInfo) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *ShareInfo) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *ShareInfo) SetPublic(v bool) {
	o.Public = &v
}

// GetShareId returns the ShareId field value if set, zero value otherwise.
func (o *ShareInfo) GetShareId() string {
	if o == nil || IsNil(o.ShareId) {
		var ret string
		return ret
	}
	return *o.ShareId
}

// GetShareIdOk returns a tuple with the ShareId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetShareIdOk() (*string, bool) {
	if o == nil || IsNil(o.ShareId) {
		return nil, false
	}
	return o.ShareId, true
}

// HasShareId returns a boolean if a field has been set.
func (o *ShareInfo) HasShareId() bool {
	if o != nil && !IsNil(o.ShareId) {
		return true
	}

	return false
}

// SetShareId gets a reference to the given string and assigns it to the ShareId field.
func (o *ShareInfo) SetShareId(v string) {
	o.ShareId = &v
}

// GetShareName returns the ShareName field value if set, zero value otherwise.
func (o *ShareInfo) GetShareName() string {
	if o == nil || IsNil(o.ShareName) {
		var ret string
		return ret
	}
	return *o.ShareName
}

// GetShareNameOk returns a tuple with the ShareName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetShareNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShareName) {
		return nil, false
	}
	return o.ShareName, true
}

// HasShareName returns a boolean if a field has been set.
func (o *ShareInfo) HasShareName() bool {
	if o != nil && !IsNil(o.ShareName) {
		return true
	}

	return false
}

// SetShareName gets a reference to the given string and assigns it to the ShareName field.
func (o *ShareInfo) SetShareName(v string) {
	o.ShareName = &v
}

// GetShareType returns the ShareType field value if set, zero value otherwise.
func (o *ShareInfo) GetShareType() string {
	if o == nil || IsNil(o.ShareType) {
		var ret string
		return ret
	}
	return *o.ShareType
}

// GetShareTypeOk returns a tuple with the ShareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetShareTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ShareType) {
		return nil, false
	}
	return o.ShareType, true
}

// HasShareType returns a boolean if a field has been set.
func (o *ShareInfo) HasShareType() bool {
	if o != nil && !IsNil(o.ShareType) {
		return true
	}

	return false
}

// SetShareType gets a reference to the given string and assigns it to the ShareType field.
func (o *ShareInfo) SetShareType(v string) {
	o.ShareType = &v
}

// GetTimelineOnly returns the TimelineOnly field value if set, zero value otherwise.
func (o *ShareInfo) GetTimelineOnly() bool {
	if o == nil || IsNil(o.TimelineOnly) {
		var ret bool
		return ret
	}
	return *o.TimelineOnly
}

// GetTimelineOnlyOk returns a tuple with the TimelineOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetTimelineOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.TimelineOnly) {
		return nil, false
	}
	return o.TimelineOnly, true
}

// HasTimelineOnly returns a boolean if a field has been set.
func (o *ShareInfo) HasTimelineOnly() bool {
	if o != nil && !IsNil(o.TimelineOnly) {
		return true
	}

	return false
}

// SetTimelineOnly gets a reference to the given bool and assigns it to the TimelineOnly field.
func (o *ShareInfo) SetTimelineOnly(v bool) {
	o.TimelineOnly = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ShareInfo) GetUpdated() int32 {
	if o == nil || IsNil(o.Updated) {
		var ret int32
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetUpdatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ShareInfo) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given int32 and assigns it to the Updated field.
func (o *ShareInfo) SetUpdated(v int32) {
	o.Updated = &v
}

// GetWormhole returns the Wormhole field value if set, zero value otherwise.
func (o *ShareInfo) GetWormhole() bool {
	if o == nil || IsNil(o.Wormhole) {
		var ret bool
		return ret
	}
	return *o.Wormhole
}

// GetWormholeOk returns a tuple with the Wormhole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareInfo) GetWormholeOk() (*bool, bool) {
	if o == nil || IsNil(o.Wormhole) {
		return nil, false
	}
	return o.Wormhole, true
}

// HasWormhole returns a boolean if a field has been set.
func (o *ShareInfo) HasWormhole() bool {
	if o != nil && !IsNil(o.Wormhole) {
		return true
	}

	return false
}

// SetWormhole gets a reference to the given bool and assigns it to the Wormhole field.
func (o *ShareInfo) SetWormhole(v bool) {
	o.Wormhole = &v
}

func (o ShareInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShareInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accessors) {
		toSerialize["accessors"] = o.Accessors
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.FileId) {
		toSerialize["fileId"] = o.FileId
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.ShareId) {
		toSerialize["shareId"] = o.ShareId
	}
	if !IsNil(o.ShareName) {
		toSerialize["shareName"] = o.ShareName
	}
	if !IsNil(o.ShareType) {
		toSerialize["shareType"] = o.ShareType
	}
	if !IsNil(o.TimelineOnly) {
		toSerialize["timelineOnly"] = o.TimelineOnly
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Wormhole) {
		toSerialize["wormhole"] = o.Wormhole
	}
	return toSerialize, nil
}

type NullableShareInfo struct {
	value *ShareInfo
	isSet bool
}

func (v NullableShareInfo) Get() *ShareInfo {
	return v.value
}

func (v *NullableShareInfo) Set(val *ShareInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableShareInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableShareInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareInfo(val *ShareInfo) *NullableShareInfo {
	return &NullableShareInfo{value: val, isSet: true}
}

func (v NullableShareInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


