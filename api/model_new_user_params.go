/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NewUserParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewUserParams{}

// NewUserParams struct for NewUserParams
type NewUserParams struct {
	Admin *bool `json:"admin,omitempty"`
	AutoActivate *bool `json:"autoActivate,omitempty"`
	FullName string `json:"fullName"`
	Password string `json:"password"`
	Username string `json:"username"`
}

type _NewUserParams NewUserParams

// NewNewUserParams instantiates a new NewUserParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewUserParams(fullName string, password string, username string) *NewUserParams {
	this := NewUserParams{}
	this.FullName = fullName
	this.Password = password
	this.Username = username
	return &this
}

// NewNewUserParamsWithDefaults instantiates a new NewUserParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewUserParamsWithDefaults() *NewUserParams {
	this := NewUserParams{}
	return &this
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *NewUserParams) GetAdmin() bool {
	if o == nil || IsNil(o.Admin) {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUserParams) GetAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *NewUserParams) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *NewUserParams) SetAdmin(v bool) {
	o.Admin = &v
}

// GetAutoActivate returns the AutoActivate field value if set, zero value otherwise.
func (o *NewUserParams) GetAutoActivate() bool {
	if o == nil || IsNil(o.AutoActivate) {
		var ret bool
		return ret
	}
	return *o.AutoActivate
}

// GetAutoActivateOk returns a tuple with the AutoActivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewUserParams) GetAutoActivateOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoActivate) {
		return nil, false
	}
	return o.AutoActivate, true
}

// HasAutoActivate returns a boolean if a field has been set.
func (o *NewUserParams) HasAutoActivate() bool {
	if o != nil && !IsNil(o.AutoActivate) {
		return true
	}

	return false
}

// SetAutoActivate gets a reference to the given bool and assigns it to the AutoActivate field.
func (o *NewUserParams) SetAutoActivate(v bool) {
	o.AutoActivate = &v
}

// GetFullName returns the FullName field value
func (o *NewUserParams) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *NewUserParams) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *NewUserParams) SetFullName(v string) {
	o.FullName = v
}

// GetPassword returns the Password field value
func (o *NewUserParams) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *NewUserParams) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *NewUserParams) SetPassword(v string) {
	o.Password = v
}

// GetUsername returns the Username field value
func (o *NewUserParams) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *NewUserParams) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *NewUserParams) SetUsername(v string) {
	o.Username = v
}

func (o NewUserParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewUserParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.AutoActivate) {
		toSerialize["autoActivate"] = o.AutoActivate
	}
	toSerialize["fullName"] = o.FullName
	toSerialize["password"] = o.Password
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *NewUserParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fullName",
		"password",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewUserParams := _NewUserParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewUserParams)

	if err != nil {
		return err
	}

	*o = NewUserParams(varNewUserParams)

	return err
}

type NullableNewUserParams struct {
	value *NewUserParams
	isSet bool
}

func (v NullableNewUserParams) Get() *NewUserParams {
	return v.value
}

func (v *NullableNewUserParams) Set(val *NewUserParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNewUserParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNewUserParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewUserParams(val *NewUserParams) *NullableNewUserParams {
	return &NullableNewUserParams{value: val, isSet: true}
}

func (v NullableNewUserParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewUserParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


