/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateFileParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFileParams{}

// UpdateFileParams struct for UpdateFileParams
type UpdateFileParams struct {
	NewName *string `json:"newName,omitempty"`
	NewParentId *string `json:"newParentId,omitempty"`
}

// NewUpdateFileParams instantiates a new UpdateFileParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFileParams() *UpdateFileParams {
	this := UpdateFileParams{}
	return &this
}

// NewUpdateFileParamsWithDefaults instantiates a new UpdateFileParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFileParamsWithDefaults() *UpdateFileParams {
	this := UpdateFileParams{}
	return &this
}

// GetNewName returns the NewName field value if set, zero value otherwise.
func (o *UpdateFileParams) GetNewName() string {
	if o == nil || IsNil(o.NewName) {
		var ret string
		return ret
	}
	return *o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileParams) GetNewNameOk() (*string, bool) {
	if o == nil || IsNil(o.NewName) {
		return nil, false
	}
	return o.NewName, true
}

// HasNewName returns a boolean if a field has been set.
func (o *UpdateFileParams) HasNewName() bool {
	if o != nil && !IsNil(o.NewName) {
		return true
	}

	return false
}

// SetNewName gets a reference to the given string and assigns it to the NewName field.
func (o *UpdateFileParams) SetNewName(v string) {
	o.NewName = &v
}

// GetNewParentId returns the NewParentId field value if set, zero value otherwise.
func (o *UpdateFileParams) GetNewParentId() string {
	if o == nil || IsNil(o.NewParentId) {
		var ret string
		return ret
	}
	return *o.NewParentId
}

// GetNewParentIdOk returns a tuple with the NewParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileParams) GetNewParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.NewParentId) {
		return nil, false
	}
	return o.NewParentId, true
}

// HasNewParentId returns a boolean if a field has been set.
func (o *UpdateFileParams) HasNewParentId() bool {
	if o != nil && !IsNil(o.NewParentId) {
		return true
	}

	return false
}

// SetNewParentId gets a reference to the given string and assigns it to the NewParentId field.
func (o *UpdateFileParams) SetNewParentId(v string) {
	o.NewParentId = &v
}

func (o UpdateFileParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFileParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewName) {
		toSerialize["newName"] = o.NewName
	}
	if !IsNil(o.NewParentId) {
		toSerialize["newParentId"] = o.NewParentId
	}
	return toSerialize, nil
}

type NullableUpdateFileParams struct {
	value *UpdateFileParams
	isSet bool
}

func (v NullableUpdateFileParams) Get() *UpdateFileParams {
	return v.value
}

func (v *NullableUpdateFileParams) Set(val *UpdateFileParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFileParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFileParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFileParams(val *UpdateFileParams) *NullableUpdateFileParams {
	return &NullableUpdateFileParams{value: val, isSet: true}
}

func (v NullableUpdateFileParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFileParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


