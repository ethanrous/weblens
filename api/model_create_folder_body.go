/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateFolderBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFolderBody{}

// CreateFolderBody struct for CreateFolderBody
type CreateFolderBody struct {
	Children []string `json:"children,omitempty"`
	NewFolderName string `json:"newFolderName"`
	ParentFolderId string `json:"parentFolderId"`
}

type _CreateFolderBody CreateFolderBody

// NewCreateFolderBody instantiates a new CreateFolderBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFolderBody(newFolderName string, parentFolderId string) *CreateFolderBody {
	this := CreateFolderBody{}
	this.NewFolderName = newFolderName
	this.ParentFolderId = parentFolderId
	return &this
}

// NewCreateFolderBodyWithDefaults instantiates a new CreateFolderBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFolderBodyWithDefaults() *CreateFolderBody {
	this := CreateFolderBody{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *CreateFolderBody) GetChildren() []string {
	if o == nil || IsNil(o.Children) {
		var ret []string
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFolderBody) GetChildrenOk() ([]string, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *CreateFolderBody) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []string and assigns it to the Children field.
func (o *CreateFolderBody) SetChildren(v []string) {
	o.Children = v
}

// GetNewFolderName returns the NewFolderName field value
func (o *CreateFolderBody) GetNewFolderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewFolderName
}

// GetNewFolderNameOk returns a tuple with the NewFolderName field value
// and a boolean to check if the value has been set.
func (o *CreateFolderBody) GetNewFolderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewFolderName, true
}

// SetNewFolderName sets field value
func (o *CreateFolderBody) SetNewFolderName(v string) {
	o.NewFolderName = v
}

// GetParentFolderId returns the ParentFolderId field value
func (o *CreateFolderBody) GetParentFolderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value
// and a boolean to check if the value has been set.
func (o *CreateFolderBody) GetParentFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentFolderId, true
}

// SetParentFolderId sets field value
func (o *CreateFolderBody) SetParentFolderId(v string) {
	o.ParentFolderId = v
}

func (o CreateFolderBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateFolderBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	toSerialize["newFolderName"] = o.NewFolderName
	toSerialize["parentFolderId"] = o.ParentFolderId
	return toSerialize, nil
}

func (o *CreateFolderBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"newFolderName",
		"parentFolderId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateFolderBody := _CreateFolderBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateFolderBody)

	if err != nil {
		return err
	}

	*o = CreateFolderBody(varCreateFolderBody)

	return err
}

type NullableCreateFolderBody struct {
	value *CreateFolderBody
	isSet bool
}

func (v NullableCreateFolderBody) Get() *CreateFolderBody {
	return v.value
}

func (v *NullableCreateFolderBody) Set(val *CreateFolderBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFolderBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFolderBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFolderBody(val *CreateFolderBody) *NullableCreateFolderBody {
	return &NullableCreateFolderBody{value: val, isSet: true}
}

func (v NullableCreateFolderBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFolderBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


