/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Config{}

// Config struct for Config
type Config struct {
	AllowRegistrations *bool `json:"allowRegistrations,omitempty"`
	EnableHDIR *bool `json:"enableHDIR,omitempty"`
}

// NewConfig instantiates a new Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig() *Config {
	this := Config{}
	return &this
}

// NewConfigWithDefaults instantiates a new Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigWithDefaults() *Config {
	this := Config{}
	return &this
}

// GetAllowRegistrations returns the AllowRegistrations field value if set, zero value otherwise.
func (o *Config) GetAllowRegistrations() bool {
	if o == nil || IsNil(o.AllowRegistrations) {
		var ret bool
		return ret
	}
	return *o.AllowRegistrations
}

// GetAllowRegistrationsOk returns a tuple with the AllowRegistrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetAllowRegistrationsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRegistrations) {
		return nil, false
	}
	return o.AllowRegistrations, true
}

// HasAllowRegistrations returns a boolean if a field has been set.
func (o *Config) HasAllowRegistrations() bool {
	if o != nil && !IsNil(o.AllowRegistrations) {
		return true
	}

	return false
}

// SetAllowRegistrations gets a reference to the given bool and assigns it to the AllowRegistrations field.
func (o *Config) SetAllowRegistrations(v bool) {
	o.AllowRegistrations = &v
}

// GetEnableHDIR returns the EnableHDIR field value if set, zero value otherwise.
func (o *Config) GetEnableHDIR() bool {
	if o == nil || IsNil(o.EnableHDIR) {
		var ret bool
		return ret
	}
	return *o.EnableHDIR
}

// GetEnableHDIROk returns a tuple with the EnableHDIR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetEnableHDIROk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHDIR) {
		return nil, false
	}
	return o.EnableHDIR, true
}

// HasEnableHDIR returns a boolean if a field has been set.
func (o *Config) HasEnableHDIR() bool {
	if o != nil && !IsNil(o.EnableHDIR) {
		return true
	}

	return false
}

// SetEnableHDIR gets a reference to the given bool and assigns it to the EnableHDIR field.
func (o *Config) SetEnableHDIR(v bool) {
	o.EnableHDIR = &v
}

func (o Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowRegistrations) {
		toSerialize["allowRegistrations"] = o.AllowRegistrations
	}
	if !IsNil(o.EnableHDIR) {
		toSerialize["enableHDIR"] = o.EnableHDIR
	}
	return toSerialize, nil
}

type NullableConfig struct {
	value *Config
	isSet bool
}

func (v NullableConfig) Get() *Config {
	return v.value
}

func (v *NullableConfig) Set(val *Config) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig(val *Config) *NullableConfig {
	return &NullableConfig{value: val, isSet: true}
}

func (v NullableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


