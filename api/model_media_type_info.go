/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MediaTypeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaTypeInfo{}

// MediaTypeInfo struct for MediaTypeInfo
type MediaTypeInfo struct {
	FileExtension []string `json:"FileExtension,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	IsDisplayable *bool `json:"IsDisplayable,omitempty"`
	IsRaw *bool `json:"IsRaw,omitempty"`
	IsVideo *bool `json:"IsVideo,omitempty"`
	MultiPage *bool `json:"MultiPage,omitempty"`
	RawThumbExifKey *string `json:"RawThumbExifKey,omitempty"`
	SupportsImgRecog *bool `json:"SupportsImgRecog,omitempty"`
	Mime *string `json:"mime,omitempty"`
}

// NewMediaTypeInfo instantiates a new MediaTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaTypeInfo() *MediaTypeInfo {
	this := MediaTypeInfo{}
	return &this
}

// NewMediaTypeInfoWithDefaults instantiates a new MediaTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaTypeInfoWithDefaults() *MediaTypeInfo {
	this := MediaTypeInfo{}
	return &this
}

// GetFileExtension returns the FileExtension field value if set, zero value otherwise.
func (o *MediaTypeInfo) GetFileExtension() []string {
	if o == nil || IsNil(o.FileExtension) {
		var ret []string
		return ret
	}
	return o.FileExtension
}

// GetFileExtensionOk returns a tuple with the FileExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypeInfo) GetFileExtensionOk() ([]string, bool) {
	if o == nil || IsNil(o.FileExtension) {
		return nil, false
	}
	return o.FileExtension, true
}

// HasFileExtension returns a boolean if a field has been set.
func (o *MediaTypeInfo) HasFileExtension() bool {
	if o != nil && !IsNil(o.FileExtension) {
		return true
	}

	return false
}

// SetFileExtension gets a reference to the given []string and assigns it to the FileExtension field.
func (o *MediaTypeInfo) SetFileExtension(v []string) {
	o.FileExtension = v
}

// GetFriendlyName returns the FriendlyName field value if set, zero value otherwise.
func (o *MediaTypeInfo) GetFriendlyName() string {
	if o == nil || IsNil(o.FriendlyName) {
		var ret string
		return ret
	}
	return *o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypeInfo) GetFriendlyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FriendlyName) {
		return nil, false
	}
	return o.FriendlyName, true
}

// HasFriendlyName returns a boolean if a field has been set.
func (o *MediaTypeInfo) HasFriendlyName() bool {
	if o != nil && !IsNil(o.FriendlyName) {
		return true
	}

	return false
}

// SetFriendlyName gets a reference to the given string and assigns it to the FriendlyName field.
func (o *MediaTypeInfo) SetFriendlyName(v string) {
	o.FriendlyName = &v
}

// GetIsDisplayable returns the IsDisplayable field value if set, zero value otherwise.
func (o *MediaTypeInfo) GetIsDisplayable() bool {
	if o == nil || IsNil(o.IsDisplayable) {
		var ret bool
		return ret
	}
	return *o.IsDisplayable
}

// GetIsDisplayableOk returns a tuple with the IsDisplayable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypeInfo) GetIsDisplayableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisplayable) {
		return nil, false
	}
	return o.IsDisplayable, true
}

// HasIsDisplayable returns a boolean if a field has been set.
func (o *MediaTypeInfo) HasIsDisplayable() bool {
	if o != nil && !IsNil(o.IsDisplayable) {
		return true
	}

	return false
}

// SetIsDisplayable gets a reference to the given bool and assigns it to the IsDisplayable field.
func (o *MediaTypeInfo) SetIsDisplayable(v bool) {
	o.IsDisplayable = &v
}

// GetIsRaw returns the IsRaw field value if set, zero value otherwise.
func (o *MediaTypeInfo) GetIsRaw() bool {
	if o == nil || IsNil(o.IsRaw) {
		var ret bool
		return ret
	}
	return *o.IsRaw
}

// GetIsRawOk returns a tuple with the IsRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypeInfo) GetIsRawOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRaw) {
		return nil, false
	}
	return o.IsRaw, true
}

// HasIsRaw returns a boolean if a field has been set.
func (o *MediaTypeInfo) HasIsRaw() bool {
	if o != nil && !IsNil(o.IsRaw) {
		return true
	}

	return false
}

// SetIsRaw gets a reference to the given bool and assigns it to the IsRaw field.
func (o *MediaTypeInfo) SetIsRaw(v bool) {
	o.IsRaw = &v
}

// GetIsVideo returns the IsVideo field value if set, zero value otherwise.
func (o *MediaTypeInfo) GetIsVideo() bool {
	if o == nil || IsNil(o.IsVideo) {
		var ret bool
		return ret
	}
	return *o.IsVideo
}

// GetIsVideoOk returns a tuple with the IsVideo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypeInfo) GetIsVideoOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVideo) {
		return nil, false
	}
	return o.IsVideo, true
}

// HasIsVideo returns a boolean if a field has been set.
func (o *MediaTypeInfo) HasIsVideo() bool {
	if o != nil && !IsNil(o.IsVideo) {
		return true
	}

	return false
}

// SetIsVideo gets a reference to the given bool and assigns it to the IsVideo field.
func (o *MediaTypeInfo) SetIsVideo(v bool) {
	o.IsVideo = &v
}

// GetMultiPage returns the MultiPage field value if set, zero value otherwise.
func (o *MediaTypeInfo) GetMultiPage() bool {
	if o == nil || IsNil(o.MultiPage) {
		var ret bool
		return ret
	}
	return *o.MultiPage
}

// GetMultiPageOk returns a tuple with the MultiPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypeInfo) GetMultiPageOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiPage) {
		return nil, false
	}
	return o.MultiPage, true
}

// HasMultiPage returns a boolean if a field has been set.
func (o *MediaTypeInfo) HasMultiPage() bool {
	if o != nil && !IsNil(o.MultiPage) {
		return true
	}

	return false
}

// SetMultiPage gets a reference to the given bool and assigns it to the MultiPage field.
func (o *MediaTypeInfo) SetMultiPage(v bool) {
	o.MultiPage = &v
}

// GetRawThumbExifKey returns the RawThumbExifKey field value if set, zero value otherwise.
func (o *MediaTypeInfo) GetRawThumbExifKey() string {
	if o == nil || IsNil(o.RawThumbExifKey) {
		var ret string
		return ret
	}
	return *o.RawThumbExifKey
}

// GetRawThumbExifKeyOk returns a tuple with the RawThumbExifKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypeInfo) GetRawThumbExifKeyOk() (*string, bool) {
	if o == nil || IsNil(o.RawThumbExifKey) {
		return nil, false
	}
	return o.RawThumbExifKey, true
}

// HasRawThumbExifKey returns a boolean if a field has been set.
func (o *MediaTypeInfo) HasRawThumbExifKey() bool {
	if o != nil && !IsNil(o.RawThumbExifKey) {
		return true
	}

	return false
}

// SetRawThumbExifKey gets a reference to the given string and assigns it to the RawThumbExifKey field.
func (o *MediaTypeInfo) SetRawThumbExifKey(v string) {
	o.RawThumbExifKey = &v
}

// GetSupportsImgRecog returns the SupportsImgRecog field value if set, zero value otherwise.
func (o *MediaTypeInfo) GetSupportsImgRecog() bool {
	if o == nil || IsNil(o.SupportsImgRecog) {
		var ret bool
		return ret
	}
	return *o.SupportsImgRecog
}

// GetSupportsImgRecogOk returns a tuple with the SupportsImgRecog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypeInfo) GetSupportsImgRecogOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsImgRecog) {
		return nil, false
	}
	return o.SupportsImgRecog, true
}

// HasSupportsImgRecog returns a boolean if a field has been set.
func (o *MediaTypeInfo) HasSupportsImgRecog() bool {
	if o != nil && !IsNil(o.SupportsImgRecog) {
		return true
	}

	return false
}

// SetSupportsImgRecog gets a reference to the given bool and assigns it to the SupportsImgRecog field.
func (o *MediaTypeInfo) SetSupportsImgRecog(v bool) {
	o.SupportsImgRecog = &v
}

// GetMime returns the Mime field value if set, zero value otherwise.
func (o *MediaTypeInfo) GetMime() string {
	if o == nil || IsNil(o.Mime) {
		var ret string
		return ret
	}
	return *o.Mime
}

// GetMimeOk returns a tuple with the Mime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypeInfo) GetMimeOk() (*string, bool) {
	if o == nil || IsNil(o.Mime) {
		return nil, false
	}
	return o.Mime, true
}

// HasMime returns a boolean if a field has been set.
func (o *MediaTypeInfo) HasMime() bool {
	if o != nil && !IsNil(o.Mime) {
		return true
	}

	return false
}

// SetMime gets a reference to the given string and assigns it to the Mime field.
func (o *MediaTypeInfo) SetMime(v string) {
	o.Mime = &v
}

func (o MediaTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaTypeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileExtension) {
		toSerialize["FileExtension"] = o.FileExtension
	}
	if !IsNil(o.FriendlyName) {
		toSerialize["FriendlyName"] = o.FriendlyName
	}
	if !IsNil(o.IsDisplayable) {
		toSerialize["IsDisplayable"] = o.IsDisplayable
	}
	if !IsNil(o.IsRaw) {
		toSerialize["IsRaw"] = o.IsRaw
	}
	if !IsNil(o.IsVideo) {
		toSerialize["IsVideo"] = o.IsVideo
	}
	if !IsNil(o.MultiPage) {
		toSerialize["MultiPage"] = o.MultiPage
	}
	if !IsNil(o.RawThumbExifKey) {
		toSerialize["RawThumbExifKey"] = o.RawThumbExifKey
	}
	if !IsNil(o.SupportsImgRecog) {
		toSerialize["SupportsImgRecog"] = o.SupportsImgRecog
	}
	if !IsNil(o.Mime) {
		toSerialize["mime"] = o.Mime
	}
	return toSerialize, nil
}

type NullableMediaTypeInfo struct {
	value *MediaTypeInfo
	isSet bool
}

func (v NullableMediaTypeInfo) Get() *MediaTypeInfo {
	return v.value
}

func (v *NullableMediaTypeInfo) Set(val *MediaTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaTypeInfo(val *MediaTypeInfo) *NullableMediaTypeInfo {
	return &NullableMediaTypeInfo{value: val, isSet: true}
}

func (v NullableMediaTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


