/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StructsInitServerParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StructsInitServerParams{}

// StructsInitServerParams struct for StructsInitServerParams
type StructsInitServerParams struct {
	CoreAddress *string `json:"coreAddress,omitempty"`
	CoreKey *string `json:"coreKey,omitempty"`
	FullName *string `json:"fullName,omitempty"`
	// For restoring a server, remoind the core of its serverId and api key the remote last used
	LocalId *string `json:"localId,omitempty"`
	Name *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	RemoteId *string `json:"remoteId,omitempty"`
	Role *string `json:"role,omitempty"`
	Username *string `json:"username,omitempty"`
	UsingKeyInfo *string `json:"usingKeyInfo,omitempty"`
}

// NewStructsInitServerParams instantiates a new StructsInitServerParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructsInitServerParams() *StructsInitServerParams {
	this := StructsInitServerParams{}
	return &this
}

// NewStructsInitServerParamsWithDefaults instantiates a new StructsInitServerParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructsInitServerParamsWithDefaults() *StructsInitServerParams {
	this := StructsInitServerParams{}
	return &this
}

// GetCoreAddress returns the CoreAddress field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetCoreAddress() string {
	if o == nil || IsNil(o.CoreAddress) {
		var ret string
		return ret
	}
	return *o.CoreAddress
}

// GetCoreAddressOk returns a tuple with the CoreAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetCoreAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CoreAddress) {
		return nil, false
	}
	return o.CoreAddress, true
}

// HasCoreAddress returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasCoreAddress() bool {
	if o != nil && !IsNil(o.CoreAddress) {
		return true
	}

	return false
}

// SetCoreAddress gets a reference to the given string and assigns it to the CoreAddress field.
func (o *StructsInitServerParams) SetCoreAddress(v string) {
	o.CoreAddress = &v
}

// GetCoreKey returns the CoreKey field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetCoreKey() string {
	if o == nil || IsNil(o.CoreKey) {
		var ret string
		return ret
	}
	return *o.CoreKey
}

// GetCoreKeyOk returns a tuple with the CoreKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetCoreKeyOk() (*string, bool) {
	if o == nil || IsNil(o.CoreKey) {
		return nil, false
	}
	return o.CoreKey, true
}

// HasCoreKey returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasCoreKey() bool {
	if o != nil && !IsNil(o.CoreKey) {
		return true
	}

	return false
}

// SetCoreKey gets a reference to the given string and assigns it to the CoreKey field.
func (o *StructsInitServerParams) SetCoreKey(v string) {
	o.CoreKey = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *StructsInitServerParams) SetFullName(v string) {
	o.FullName = &v
}

// GetLocalId returns the LocalId field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetLocalId() string {
	if o == nil || IsNil(o.LocalId) {
		var ret string
		return ret
	}
	return *o.LocalId
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetLocalIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocalId) {
		return nil, false
	}
	return o.LocalId, true
}

// HasLocalId returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasLocalId() bool {
	if o != nil && !IsNil(o.LocalId) {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given string and assigns it to the LocalId field.
func (o *StructsInitServerParams) SetLocalId(v string) {
	o.LocalId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StructsInitServerParams) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *StructsInitServerParams) SetPassword(v string) {
	o.Password = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetRemoteId() string {
	if o == nil || IsNil(o.RemoteId) {
		var ret string
		return ret
	}
	return *o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteId) {
		return nil, false
	}
	return o.RemoteId, true
}

// HasRemoteId returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasRemoteId() bool {
	if o != nil && !IsNil(o.RemoteId) {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given string and assigns it to the RemoteId field.
func (o *StructsInitServerParams) SetRemoteId(v string) {
	o.RemoteId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *StructsInitServerParams) SetRole(v string) {
	o.Role = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *StructsInitServerParams) SetUsername(v string) {
	o.Username = &v
}

// GetUsingKeyInfo returns the UsingKeyInfo field value if set, zero value otherwise.
func (o *StructsInitServerParams) GetUsingKeyInfo() string {
	if o == nil || IsNil(o.UsingKeyInfo) {
		var ret string
		return ret
	}
	return *o.UsingKeyInfo
}

// GetUsingKeyInfoOk returns a tuple with the UsingKeyInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsInitServerParams) GetUsingKeyInfoOk() (*string, bool) {
	if o == nil || IsNil(o.UsingKeyInfo) {
		return nil, false
	}
	return o.UsingKeyInfo, true
}

// HasUsingKeyInfo returns a boolean if a field has been set.
func (o *StructsInitServerParams) HasUsingKeyInfo() bool {
	if o != nil && !IsNil(o.UsingKeyInfo) {
		return true
	}

	return false
}

// SetUsingKeyInfo gets a reference to the given string and assigns it to the UsingKeyInfo field.
func (o *StructsInitServerParams) SetUsingKeyInfo(v string) {
	o.UsingKeyInfo = &v
}

func (o StructsInitServerParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StructsInitServerParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CoreAddress) {
		toSerialize["coreAddress"] = o.CoreAddress
	}
	if !IsNil(o.CoreKey) {
		toSerialize["coreKey"] = o.CoreKey
	}
	if !IsNil(o.FullName) {
		toSerialize["fullName"] = o.FullName
	}
	if !IsNil(o.LocalId) {
		toSerialize["localId"] = o.LocalId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.RemoteId) {
		toSerialize["remoteId"] = o.RemoteId
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.UsingKeyInfo) {
		toSerialize["usingKeyInfo"] = o.UsingKeyInfo
	}
	return toSerialize, nil
}

type NullableStructsInitServerParams struct {
	value *StructsInitServerParams
	isSet bool
}

func (v NullableStructsInitServerParams) Get() *StructsInitServerParams {
	return v.value
}

func (v *NullableStructsInitServerParams) Set(val *StructsInitServerParams) {
	v.value = val
	v.isSet = true
}

func (v NullableStructsInitServerParams) IsSet() bool {
	return v.isSet
}

func (v *NullableStructsInitServerParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructsInitServerParams(val *StructsInitServerParams) *NullableStructsInitServerParams {
	return &NullableStructsInitServerParams{value: val, isSet: true}
}

func (v NullableStructsInitServerParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructsInitServerParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


