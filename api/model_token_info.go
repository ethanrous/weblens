/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenInfo{}

// TokenInfo struct for TokenInfo
type TokenInfo struct {
	CreatedBy string `json:"createdBy"`
	CreatedTime int64 `json:"createdTime"`
	Id string `json:"id"`
	LastUsed int64 `json:"lastUsed"`
	Nickname string `json:"nickname"`
	Owner string `json:"owner"`
	RemoteUsing string `json:"remoteUsing"`
	Token string `json:"token"`
}

type _TokenInfo TokenInfo

// NewTokenInfo instantiates a new TokenInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenInfo(createdBy string, createdTime int64, id string, lastUsed int64, nickname string, owner string, remoteUsing string, token string) *TokenInfo {
	this := TokenInfo{}
	this.CreatedBy = createdBy
	this.CreatedTime = createdTime
	this.Id = id
	this.LastUsed = lastUsed
	this.Nickname = nickname
	this.Owner = owner
	this.RemoteUsing = remoteUsing
	this.Token = token
	return &this
}

// NewTokenInfoWithDefaults instantiates a new TokenInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenInfoWithDefaults() *TokenInfo {
	this := TokenInfo{}
	return &this
}

// GetCreatedBy returns the CreatedBy field value
func (o *TokenInfo) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *TokenInfo) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *TokenInfo) GetCreatedTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetCreatedTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *TokenInfo) SetCreatedTime(v int64) {
	o.CreatedTime = v
}

// GetId returns the Id field value
func (o *TokenInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TokenInfo) SetId(v string) {
	o.Id = v
}

// GetLastUsed returns the LastUsed field value
func (o *TokenInfo) GetLastUsed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetLastUsedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUsed, true
}

// SetLastUsed sets field value
func (o *TokenInfo) SetLastUsed(v int64) {
	o.LastUsed = v
}

// GetNickname returns the Nickname field value
func (o *TokenInfo) GetNickname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetNicknameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nickname, true
}

// SetNickname sets field value
func (o *TokenInfo) SetNickname(v string) {
	o.Nickname = v
}

// GetOwner returns the Owner field value
func (o *TokenInfo) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *TokenInfo) SetOwner(v string) {
	o.Owner = v
}

// GetRemoteUsing returns the RemoteUsing field value
func (o *TokenInfo) GetRemoteUsing() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteUsing
}

// GetRemoteUsingOk returns a tuple with the RemoteUsing field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetRemoteUsingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteUsing, true
}

// SetRemoteUsing sets field value
func (o *TokenInfo) SetRemoteUsing(v string) {
	o.RemoteUsing = v
}

// GetToken returns the Token field value
func (o *TokenInfo) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *TokenInfo) SetToken(v string) {
	o.Token = v
}

func (o TokenInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["createdTime"] = o.CreatedTime
	toSerialize["id"] = o.Id
	toSerialize["lastUsed"] = o.LastUsed
	toSerialize["nickname"] = o.Nickname
	toSerialize["owner"] = o.Owner
	toSerialize["remoteUsing"] = o.RemoteUsing
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *TokenInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdBy",
		"createdTime",
		"id",
		"lastUsed",
		"nickname",
		"owner",
		"remoteUsing",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenInfo := _TokenInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenInfo)

	if err != nil {
		return err
	}

	*o = TokenInfo(varTokenInfo)

	return err
}

type NullableTokenInfo struct {
	value *TokenInfo
	isSet bool
}

func (v NullableTokenInfo) Get() *TokenInfo {
	return v.value
}

func (v *NullableTokenInfo) Set(val *TokenInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenInfo(val *TokenInfo) *NullableTokenInfo {
	return &NullableTokenInfo{value: val, isSet: true}
}

func (v NullableTokenInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


