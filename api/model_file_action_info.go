/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileActionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileActionInfo{}

// FileActionInfo struct for FileActionInfo
type FileActionInfo struct {
	ActionType string `json:"actionType"`
	DestinationPath *string `json:"destinationPath,omitempty"`
	EventId string `json:"eventId"`
	FileId string `json:"fileId"`
	Filepath *string `json:"filepath,omitempty"`
	OriginPath *string `json:"originPath,omitempty"`
	ParentId string `json:"parentId"`
	Size int64 `json:"size"`
	Timestamp int64 `json:"timestamp"`
	TowerId string `json:"towerId"`
}

type _FileActionInfo FileActionInfo

// NewFileActionInfo instantiates a new FileActionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileActionInfo(actionType string, eventId string, fileId string, parentId string, size int64, timestamp int64, towerId string) *FileActionInfo {
	this := FileActionInfo{}
	this.ActionType = actionType
	this.EventId = eventId
	this.FileId = fileId
	this.ParentId = parentId
	this.Size = size
	this.Timestamp = timestamp
	this.TowerId = towerId
	return &this
}

// NewFileActionInfoWithDefaults instantiates a new FileActionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileActionInfoWithDefaults() *FileActionInfo {
	this := FileActionInfo{}
	return &this
}

// GetActionType returns the ActionType field value
func (o *FileActionInfo) GetActionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetActionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionType, true
}

// SetActionType sets field value
func (o *FileActionInfo) SetActionType(v string) {
	o.ActionType = v
}

// GetDestinationPath returns the DestinationPath field value if set, zero value otherwise.
func (o *FileActionInfo) GetDestinationPath() string {
	if o == nil || IsNil(o.DestinationPath) {
		var ret string
		return ret
	}
	return *o.DestinationPath
}

// GetDestinationPathOk returns a tuple with the DestinationPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetDestinationPathOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationPath) {
		return nil, false
	}
	return o.DestinationPath, true
}

// HasDestinationPath returns a boolean if a field has been set.
func (o *FileActionInfo) HasDestinationPath() bool {
	if o != nil && !IsNil(o.DestinationPath) {
		return true
	}

	return false
}

// SetDestinationPath gets a reference to the given string and assigns it to the DestinationPath field.
func (o *FileActionInfo) SetDestinationPath(v string) {
	o.DestinationPath = &v
}

// GetEventId returns the EventId field value
func (o *FileActionInfo) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *FileActionInfo) SetEventId(v string) {
	o.EventId = v
}

// GetFileId returns the FileId field value
func (o *FileActionInfo) GetFileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetFileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileId, true
}

// SetFileId sets field value
func (o *FileActionInfo) SetFileId(v string) {
	o.FileId = v
}

// GetFilepath returns the Filepath field value if set, zero value otherwise.
func (o *FileActionInfo) GetFilepath() string {
	if o == nil || IsNil(o.Filepath) {
		var ret string
		return ret
	}
	return *o.Filepath
}

// GetFilepathOk returns a tuple with the Filepath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetFilepathOk() (*string, bool) {
	if o == nil || IsNil(o.Filepath) {
		return nil, false
	}
	return o.Filepath, true
}

// HasFilepath returns a boolean if a field has been set.
func (o *FileActionInfo) HasFilepath() bool {
	if o != nil && !IsNil(o.Filepath) {
		return true
	}

	return false
}

// SetFilepath gets a reference to the given string and assigns it to the Filepath field.
func (o *FileActionInfo) SetFilepath(v string) {
	o.Filepath = &v
}

// GetOriginPath returns the OriginPath field value if set, zero value otherwise.
func (o *FileActionInfo) GetOriginPath() string {
	if o == nil || IsNil(o.OriginPath) {
		var ret string
		return ret
	}
	return *o.OriginPath
}

// GetOriginPathOk returns a tuple with the OriginPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetOriginPathOk() (*string, bool) {
	if o == nil || IsNil(o.OriginPath) {
		return nil, false
	}
	return o.OriginPath, true
}

// HasOriginPath returns a boolean if a field has been set.
func (o *FileActionInfo) HasOriginPath() bool {
	if o != nil && !IsNil(o.OriginPath) {
		return true
	}

	return false
}

// SetOriginPath gets a reference to the given string and assigns it to the OriginPath field.
func (o *FileActionInfo) SetOriginPath(v string) {
	o.OriginPath = &v
}

// GetParentId returns the ParentId field value
func (o *FileActionInfo) GetParentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *FileActionInfo) SetParentId(v string) {
	o.ParentId = v
}

// GetSize returns the Size field value
func (o *FileActionInfo) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *FileActionInfo) SetSize(v int64) {
	o.Size = v
}

// GetTimestamp returns the Timestamp field value
func (o *FileActionInfo) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *FileActionInfo) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetTowerId returns the TowerId field value
func (o *FileActionInfo) GetTowerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TowerId
}

// GetTowerIdOk returns a tuple with the TowerId field value
// and a boolean to check if the value has been set.
func (o *FileActionInfo) GetTowerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TowerId, true
}

// SetTowerId sets field value
func (o *FileActionInfo) SetTowerId(v string) {
	o.TowerId = v
}

func (o FileActionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileActionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actionType"] = o.ActionType
	if !IsNil(o.DestinationPath) {
		toSerialize["destinationPath"] = o.DestinationPath
	}
	toSerialize["eventId"] = o.EventId
	toSerialize["fileId"] = o.FileId
	if !IsNil(o.Filepath) {
		toSerialize["filepath"] = o.Filepath
	}
	if !IsNil(o.OriginPath) {
		toSerialize["originPath"] = o.OriginPath
	}
	toSerialize["parentId"] = o.ParentId
	toSerialize["size"] = o.Size
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["towerId"] = o.TowerId
	return toSerialize, nil
}

func (o *FileActionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actionType",
		"eventId",
		"fileId",
		"parentId",
		"size",
		"timestamp",
		"towerId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileActionInfo := _FileActionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileActionInfo)

	if err != nil {
		return err
	}

	*o = FileActionInfo(varFileActionInfo)

	return err
}

type NullableFileActionInfo struct {
	value *FileActionInfo
	isSet bool
}

func (v NullableFileActionInfo) Get() *FileActionInfo {
	return v.value
}

func (v *NullableFileActionInfo) Set(val *FileActionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFileActionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFileActionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileActionInfo(val *FileActionInfo) *NullableFileActionInfo {
	return &NullableFileActionInfo{value: val, isSet: true}
}

func (v NullableFileActionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileActionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


