/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MediaInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaInfo{}

// MediaInfo struct for MediaInfo
type MediaInfo struct {
	// Hash of the file content, to ensure that the same files don't get duplicated
	ContentId *string `json:"contentId,omitempty"`
	CreateDate *int32 `json:"createDate,omitempty"`
	// Total time, in milliseconds, of a video
	Duration *int32 `json:"duration,omitempty"`
	// If the media disabled. This can happen when the backing file(s) are deleted, but the media stays behind because it can be re-used if needed.
	Enabled *bool `json:"enabled,omitempty"`
	// Slices of files whos content hash to the contentId
	FileIds []string `json:"fileIds,omitempty"`
	Height *int32 `json:"height,omitempty"`
	// If the media is hidden from the timeline TODO - make this per user
	Hidden *bool `json:"hidden,omitempty"`
	Imported *bool `json:"imported,omitempty"`
	LikedBy []string `json:"likedBy,omitempty"`
	// Mime-type key of the media
	MimeType *string `json:"mimeType,omitempty"`
	// User who owns the file that resulted in this media being created
	Owner *string `json:"owner,omitempty"`
	// Number of pages (typically 1, 0 in not a valid page count)
	PageCount *int32 `json:"pageCount,omitempty"`
	// Tags from the ML image scan so searching for particular objects in the images can be done
	RecognitionTags []string `json:"recognitionTags,omitempty"`
	// Full-res image dimensions
	Width *int32 `json:"width,omitempty"`
}

// NewMediaInfo instantiates a new MediaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaInfo() *MediaInfo {
	this := MediaInfo{}
	return &this
}

// NewMediaInfoWithDefaults instantiates a new MediaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaInfoWithDefaults() *MediaInfo {
	this := MediaInfo{}
	return &this
}

// GetContentId returns the ContentId field value if set, zero value otherwise.
func (o *MediaInfo) GetContentId() string {
	if o == nil || IsNil(o.ContentId) {
		var ret string
		return ret
	}
	return *o.ContentId
}

// GetContentIdOk returns a tuple with the ContentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetContentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContentId) {
		return nil, false
	}
	return o.ContentId, true
}

// HasContentId returns a boolean if a field has been set.
func (o *MediaInfo) HasContentId() bool {
	if o != nil && !IsNil(o.ContentId) {
		return true
	}

	return false
}

// SetContentId gets a reference to the given string and assigns it to the ContentId field.
func (o *MediaInfo) SetContentId(v string) {
	o.ContentId = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *MediaInfo) GetCreateDate() int32 {
	if o == nil || IsNil(o.CreateDate) {
		var ret int32
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetCreateDateOk() (*int32, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *MediaInfo) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given int32 and assigns it to the CreateDate field.
func (o *MediaInfo) SetCreateDate(v int32) {
	o.CreateDate = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *MediaInfo) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *MediaInfo) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *MediaInfo) SetDuration(v int32) {
	o.Duration = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MediaInfo) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MediaInfo) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MediaInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFileIds returns the FileIds field value if set, zero value otherwise.
func (o *MediaInfo) GetFileIds() []string {
	if o == nil || IsNil(o.FileIds) {
		var ret []string
		return ret
	}
	return o.FileIds
}

// GetFileIdsOk returns a tuple with the FileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetFileIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FileIds) {
		return nil, false
	}
	return o.FileIds, true
}

// HasFileIds returns a boolean if a field has been set.
func (o *MediaInfo) HasFileIds() bool {
	if o != nil && !IsNil(o.FileIds) {
		return true
	}

	return false
}

// SetFileIds gets a reference to the given []string and assigns it to the FileIds field.
func (o *MediaInfo) SetFileIds(v []string) {
	o.FileIds = v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *MediaInfo) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *MediaInfo) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *MediaInfo) SetHeight(v int32) {
	o.Height = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *MediaInfo) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *MediaInfo) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *MediaInfo) SetHidden(v bool) {
	o.Hidden = &v
}

// GetImported returns the Imported field value if set, zero value otherwise.
func (o *MediaInfo) GetImported() bool {
	if o == nil || IsNil(o.Imported) {
		var ret bool
		return ret
	}
	return *o.Imported
}

// GetImportedOk returns a tuple with the Imported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetImportedOk() (*bool, bool) {
	if o == nil || IsNil(o.Imported) {
		return nil, false
	}
	return o.Imported, true
}

// HasImported returns a boolean if a field has been set.
func (o *MediaInfo) HasImported() bool {
	if o != nil && !IsNil(o.Imported) {
		return true
	}

	return false
}

// SetImported gets a reference to the given bool and assigns it to the Imported field.
func (o *MediaInfo) SetImported(v bool) {
	o.Imported = &v
}

// GetLikedBy returns the LikedBy field value if set, zero value otherwise.
func (o *MediaInfo) GetLikedBy() []string {
	if o == nil || IsNil(o.LikedBy) {
		var ret []string
		return ret
	}
	return o.LikedBy
}

// GetLikedByOk returns a tuple with the LikedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetLikedByOk() ([]string, bool) {
	if o == nil || IsNil(o.LikedBy) {
		return nil, false
	}
	return o.LikedBy, true
}

// HasLikedBy returns a boolean if a field has been set.
func (o *MediaInfo) HasLikedBy() bool {
	if o != nil && !IsNil(o.LikedBy) {
		return true
	}

	return false
}

// SetLikedBy gets a reference to the given []string and assigns it to the LikedBy field.
func (o *MediaInfo) SetLikedBy(v []string) {
	o.LikedBy = v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *MediaInfo) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *MediaInfo) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *MediaInfo) SetMimeType(v string) {
	o.MimeType = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *MediaInfo) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *MediaInfo) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *MediaInfo) SetOwner(v string) {
	o.Owner = &v
}

// GetPageCount returns the PageCount field value if set, zero value otherwise.
func (o *MediaInfo) GetPageCount() int32 {
	if o == nil || IsNil(o.PageCount) {
		var ret int32
		return ret
	}
	return *o.PageCount
}

// GetPageCountOk returns a tuple with the PageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetPageCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PageCount) {
		return nil, false
	}
	return o.PageCount, true
}

// HasPageCount returns a boolean if a field has been set.
func (o *MediaInfo) HasPageCount() bool {
	if o != nil && !IsNil(o.PageCount) {
		return true
	}

	return false
}

// SetPageCount gets a reference to the given int32 and assigns it to the PageCount field.
func (o *MediaInfo) SetPageCount(v int32) {
	o.PageCount = &v
}

// GetRecognitionTags returns the RecognitionTags field value if set, zero value otherwise.
func (o *MediaInfo) GetRecognitionTags() []string {
	if o == nil || IsNil(o.RecognitionTags) {
		var ret []string
		return ret
	}
	return o.RecognitionTags
}

// GetRecognitionTagsOk returns a tuple with the RecognitionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetRecognitionTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.RecognitionTags) {
		return nil, false
	}
	return o.RecognitionTags, true
}

// HasRecognitionTags returns a boolean if a field has been set.
func (o *MediaInfo) HasRecognitionTags() bool {
	if o != nil && !IsNil(o.RecognitionTags) {
		return true
	}

	return false
}

// SetRecognitionTags gets a reference to the given []string and assigns it to the RecognitionTags field.
func (o *MediaInfo) SetRecognitionTags(v []string) {
	o.RecognitionTags = v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *MediaInfo) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfo) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *MediaInfo) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *MediaInfo) SetWidth(v int32) {
	o.Width = &v
}

func (o MediaInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentId) {
		toSerialize["contentId"] = o.ContentId
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.FileIds) {
		toSerialize["fileIds"] = o.FileIds
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.Imported) {
		toSerialize["imported"] = o.Imported
	}
	if !IsNil(o.LikedBy) {
		toSerialize["likedBy"] = o.LikedBy
	}
	if !IsNil(o.MimeType) {
		toSerialize["mimeType"] = o.MimeType
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.PageCount) {
		toSerialize["pageCount"] = o.PageCount
	}
	if !IsNil(o.RecognitionTags) {
		toSerialize["recognitionTags"] = o.RecognitionTags
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	return toSerialize, nil
}

type NullableMediaInfo struct {
	value *MediaInfo
	isSet bool
}

func (v NullableMediaInfo) Get() *MediaInfo {
	return v.value
}

func (v *NullableMediaInfo) Set(val *MediaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaInfo(val *MediaInfo) *NullableMediaInfo {
	return &NullableMediaInfo{value: val, isSet: true}
}

func (v NullableMediaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


