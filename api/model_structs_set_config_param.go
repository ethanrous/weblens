/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StructsSetConfigParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StructsSetConfigParam{}

// StructsSetConfigParam struct for StructsSetConfigParam
type StructsSetConfigParam struct {
	ConfigKey *string `json:"configKey,omitempty"`
	ConfigValue map[string]interface{} `json:"configValue,omitempty"`
}

// NewStructsSetConfigParam instantiates a new StructsSetConfigParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructsSetConfigParam() *StructsSetConfigParam {
	this := StructsSetConfigParam{}
	return &this
}

// NewStructsSetConfigParamWithDefaults instantiates a new StructsSetConfigParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructsSetConfigParamWithDefaults() *StructsSetConfigParam {
	this := StructsSetConfigParam{}
	return &this
}

// GetConfigKey returns the ConfigKey field value if set, zero value otherwise.
func (o *StructsSetConfigParam) GetConfigKey() string {
	if o == nil || IsNil(o.ConfigKey) {
		var ret string
		return ret
	}
	return *o.ConfigKey
}

// GetConfigKeyOk returns a tuple with the ConfigKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsSetConfigParam) GetConfigKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigKey) {
		return nil, false
	}
	return o.ConfigKey, true
}

// HasConfigKey returns a boolean if a field has been set.
func (o *StructsSetConfigParam) HasConfigKey() bool {
	if o != nil && !IsNil(o.ConfigKey) {
		return true
	}

	return false
}

// SetConfigKey gets a reference to the given string and assigns it to the ConfigKey field.
func (o *StructsSetConfigParam) SetConfigKey(v string) {
	o.ConfigKey = &v
}

// GetConfigValue returns the ConfigValue field value if set, zero value otherwise.
func (o *StructsSetConfigParam) GetConfigValue() map[string]interface{} {
	if o == nil || IsNil(o.ConfigValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConfigValue
}

// GetConfigValueOk returns a tuple with the ConfigValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructsSetConfigParam) GetConfigValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConfigValue) {
		return map[string]interface{}{}, false
	}
	return o.ConfigValue, true
}

// HasConfigValue returns a boolean if a field has been set.
func (o *StructsSetConfigParam) HasConfigValue() bool {
	if o != nil && !IsNil(o.ConfigValue) {
		return true
	}

	return false
}

// SetConfigValue gets a reference to the given map[string]interface{} and assigns it to the ConfigValue field.
func (o *StructsSetConfigParam) SetConfigValue(v map[string]interface{}) {
	o.ConfigValue = v
}

func (o StructsSetConfigParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StructsSetConfigParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigKey) {
		toSerialize["configKey"] = o.ConfigKey
	}
	if !IsNil(o.ConfigValue) {
		toSerialize["configValue"] = o.ConfigValue
	}
	return toSerialize, nil
}

type NullableStructsSetConfigParam struct {
	value *StructsSetConfigParam
	isSet bool
}

func (v NullableStructsSetConfigParam) Get() *StructsSetConfigParam {
	return v.value
}

func (v *NullableStructsSetConfigParam) Set(val *StructsSetConfigParam) {
	v.value = val
	v.isSet = true
}

func (v NullableStructsSetConfigParam) IsSet() bool {
	return v.isSet
}

func (v *NullableStructsSetConfigParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructsSetConfigParam(val *StructsSetConfigParam) *NullableStructsSetConfigParam {
	return &NullableStructsSetConfigParam{value: val, isSet: true}
}

func (v NullableStructsSetConfigParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructsSetConfigParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


