/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileInfo{}

// FileInfo struct for FileInfo
type FileInfo struct {
	ChildrenIds []string `json:"childrenIds,omitempty"`
	ContentId *string `json:"contentId,omitempty"`
	CurrentId *string `json:"currentId,omitempty"`
	HasRestoreMedia *bool `json:"hasRestoreMedia,omitempty"`
	Id *string `json:"id,omitempty"`
	IsDir *bool `json:"isDir,omitempty"`
	Modifiable *bool `json:"modifiable,omitempty"`
	ModifyTimestamp *int32 `json:"modifyTimestamp,omitempty"`
	Owner *string `json:"owner,omitempty"`
	ParentId *string `json:"parentId,omitempty"`
	PastFile *bool `json:"pastFile,omitempty"`
	PortablePath *string `json:"portablePath,omitempty"`
	ShareId *string `json:"shareId,omitempty"`
	Size *int32 `json:"size,omitempty"`
}

// NewFileInfo instantiates a new FileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileInfo() *FileInfo {
	this := FileInfo{}
	return &this
}

// NewFileInfoWithDefaults instantiates a new FileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileInfoWithDefaults() *FileInfo {
	this := FileInfo{}
	return &this
}

// GetChildrenIds returns the ChildrenIds field value if set, zero value otherwise.
func (o *FileInfo) GetChildrenIds() []string {
	if o == nil || IsNil(o.ChildrenIds) {
		var ret []string
		return ret
	}
	return o.ChildrenIds
}

// GetChildrenIdsOk returns a tuple with the ChildrenIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetChildrenIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ChildrenIds) {
		return nil, false
	}
	return o.ChildrenIds, true
}

// HasChildrenIds returns a boolean if a field has been set.
func (o *FileInfo) HasChildrenIds() bool {
	if o != nil && !IsNil(o.ChildrenIds) {
		return true
	}

	return false
}

// SetChildrenIds gets a reference to the given []string and assigns it to the ChildrenIds field.
func (o *FileInfo) SetChildrenIds(v []string) {
	o.ChildrenIds = v
}

// GetContentId returns the ContentId field value if set, zero value otherwise.
func (o *FileInfo) GetContentId() string {
	if o == nil || IsNil(o.ContentId) {
		var ret string
		return ret
	}
	return *o.ContentId
}

// GetContentIdOk returns a tuple with the ContentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetContentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContentId) {
		return nil, false
	}
	return o.ContentId, true
}

// HasContentId returns a boolean if a field has been set.
func (o *FileInfo) HasContentId() bool {
	if o != nil && !IsNil(o.ContentId) {
		return true
	}

	return false
}

// SetContentId gets a reference to the given string and assigns it to the ContentId field.
func (o *FileInfo) SetContentId(v string) {
	o.ContentId = &v
}

// GetCurrentId returns the CurrentId field value if set, zero value otherwise.
func (o *FileInfo) GetCurrentId() string {
	if o == nil || IsNil(o.CurrentId) {
		var ret string
		return ret
	}
	return *o.CurrentId
}

// GetCurrentIdOk returns a tuple with the CurrentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetCurrentIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentId) {
		return nil, false
	}
	return o.CurrentId, true
}

// HasCurrentId returns a boolean if a field has been set.
func (o *FileInfo) HasCurrentId() bool {
	if o != nil && !IsNil(o.CurrentId) {
		return true
	}

	return false
}

// SetCurrentId gets a reference to the given string and assigns it to the CurrentId field.
func (o *FileInfo) SetCurrentId(v string) {
	o.CurrentId = &v
}

// GetHasRestoreMedia returns the HasRestoreMedia field value if set, zero value otherwise.
func (o *FileInfo) GetHasRestoreMedia() bool {
	if o == nil || IsNil(o.HasRestoreMedia) {
		var ret bool
		return ret
	}
	return *o.HasRestoreMedia
}

// GetHasRestoreMediaOk returns a tuple with the HasRestoreMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetHasRestoreMediaOk() (*bool, bool) {
	if o == nil || IsNil(o.HasRestoreMedia) {
		return nil, false
	}
	return o.HasRestoreMedia, true
}

// HasHasRestoreMedia returns a boolean if a field has been set.
func (o *FileInfo) HasHasRestoreMedia() bool {
	if o != nil && !IsNil(o.HasRestoreMedia) {
		return true
	}

	return false
}

// SetHasRestoreMedia gets a reference to the given bool and assigns it to the HasRestoreMedia field.
func (o *FileInfo) SetHasRestoreMedia(v bool) {
	o.HasRestoreMedia = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileInfo) SetId(v string) {
	o.Id = &v
}

// GetIsDir returns the IsDir field value if set, zero value otherwise.
func (o *FileInfo) GetIsDir() bool {
	if o == nil || IsNil(o.IsDir) {
		var ret bool
		return ret
	}
	return *o.IsDir
}

// GetIsDirOk returns a tuple with the IsDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetIsDirOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDir) {
		return nil, false
	}
	return o.IsDir, true
}

// HasIsDir returns a boolean if a field has been set.
func (o *FileInfo) HasIsDir() bool {
	if o != nil && !IsNil(o.IsDir) {
		return true
	}

	return false
}

// SetIsDir gets a reference to the given bool and assigns it to the IsDir field.
func (o *FileInfo) SetIsDir(v bool) {
	o.IsDir = &v
}

// GetModifiable returns the Modifiable field value if set, zero value otherwise.
func (o *FileInfo) GetModifiable() bool {
	if o == nil || IsNil(o.Modifiable) {
		var ret bool
		return ret
	}
	return *o.Modifiable
}

// GetModifiableOk returns a tuple with the Modifiable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetModifiableOk() (*bool, bool) {
	if o == nil || IsNil(o.Modifiable) {
		return nil, false
	}
	return o.Modifiable, true
}

// HasModifiable returns a boolean if a field has been set.
func (o *FileInfo) HasModifiable() bool {
	if o != nil && !IsNil(o.Modifiable) {
		return true
	}

	return false
}

// SetModifiable gets a reference to the given bool and assigns it to the Modifiable field.
func (o *FileInfo) SetModifiable(v bool) {
	o.Modifiable = &v
}

// GetModifyTimestamp returns the ModifyTimestamp field value if set, zero value otherwise.
func (o *FileInfo) GetModifyTimestamp() int32 {
	if o == nil || IsNil(o.ModifyTimestamp) {
		var ret int32
		return ret
	}
	return *o.ModifyTimestamp
}

// GetModifyTimestampOk returns a tuple with the ModifyTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetModifyTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.ModifyTimestamp) {
		return nil, false
	}
	return o.ModifyTimestamp, true
}

// HasModifyTimestamp returns a boolean if a field has been set.
func (o *FileInfo) HasModifyTimestamp() bool {
	if o != nil && !IsNil(o.ModifyTimestamp) {
		return true
	}

	return false
}

// SetModifyTimestamp gets a reference to the given int32 and assigns it to the ModifyTimestamp field.
func (o *FileInfo) SetModifyTimestamp(v int32) {
	o.ModifyTimestamp = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *FileInfo) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *FileInfo) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *FileInfo) SetOwner(v string) {
	o.Owner = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *FileInfo) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *FileInfo) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *FileInfo) SetParentId(v string) {
	o.ParentId = &v
}

// GetPastFile returns the PastFile field value if set, zero value otherwise.
func (o *FileInfo) GetPastFile() bool {
	if o == nil || IsNil(o.PastFile) {
		var ret bool
		return ret
	}
	return *o.PastFile
}

// GetPastFileOk returns a tuple with the PastFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetPastFileOk() (*bool, bool) {
	if o == nil || IsNil(o.PastFile) {
		return nil, false
	}
	return o.PastFile, true
}

// HasPastFile returns a boolean if a field has been set.
func (o *FileInfo) HasPastFile() bool {
	if o != nil && !IsNil(o.PastFile) {
		return true
	}

	return false
}

// SetPastFile gets a reference to the given bool and assigns it to the PastFile field.
func (o *FileInfo) SetPastFile(v bool) {
	o.PastFile = &v
}

// GetPortablePath returns the PortablePath field value if set, zero value otherwise.
func (o *FileInfo) GetPortablePath() string {
	if o == nil || IsNil(o.PortablePath) {
		var ret string
		return ret
	}
	return *o.PortablePath
}

// GetPortablePathOk returns a tuple with the PortablePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetPortablePathOk() (*string, bool) {
	if o == nil || IsNil(o.PortablePath) {
		return nil, false
	}
	return o.PortablePath, true
}

// HasPortablePath returns a boolean if a field has been set.
func (o *FileInfo) HasPortablePath() bool {
	if o != nil && !IsNil(o.PortablePath) {
		return true
	}

	return false
}

// SetPortablePath gets a reference to the given string and assigns it to the PortablePath field.
func (o *FileInfo) SetPortablePath(v string) {
	o.PortablePath = &v
}

// GetShareId returns the ShareId field value if set, zero value otherwise.
func (o *FileInfo) GetShareId() string {
	if o == nil || IsNil(o.ShareId) {
		var ret string
		return ret
	}
	return *o.ShareId
}

// GetShareIdOk returns a tuple with the ShareId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetShareIdOk() (*string, bool) {
	if o == nil || IsNil(o.ShareId) {
		return nil, false
	}
	return o.ShareId, true
}

// HasShareId returns a boolean if a field has been set.
func (o *FileInfo) HasShareId() bool {
	if o != nil && !IsNil(o.ShareId) {
		return true
	}

	return false
}

// SetShareId gets a reference to the given string and assigns it to the ShareId field.
func (o *FileInfo) SetShareId(v string) {
	o.ShareId = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *FileInfo) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *FileInfo) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *FileInfo) SetSize(v int32) {
	o.Size = &v
}

func (o FileInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChildrenIds) {
		toSerialize["childrenIds"] = o.ChildrenIds
	}
	if !IsNil(o.ContentId) {
		toSerialize["contentId"] = o.ContentId
	}
	if !IsNil(o.CurrentId) {
		toSerialize["currentId"] = o.CurrentId
	}
	if !IsNil(o.HasRestoreMedia) {
		toSerialize["hasRestoreMedia"] = o.HasRestoreMedia
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsDir) {
		toSerialize["isDir"] = o.IsDir
	}
	if !IsNil(o.Modifiable) {
		toSerialize["modifiable"] = o.Modifiable
	}
	if !IsNil(o.ModifyTimestamp) {
		toSerialize["modifyTimestamp"] = o.ModifyTimestamp
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.PastFile) {
		toSerialize["pastFile"] = o.PastFile
	}
	if !IsNil(o.PortablePath) {
		toSerialize["portablePath"] = o.PortablePath
	}
	if !IsNil(o.ShareId) {
		toSerialize["shareId"] = o.ShareId
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableFileInfo struct {
	value *FileInfo
	isSet bool
}

func (v NullableFileInfo) Get() *FileInfo {
	return v.value
}

func (v *NullableFileInfo) Set(val *FileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileInfo(val *FileInfo) *NullableFileInfo {
	return &NullableFileInfo{value: val, isSet: true}
}

func (v NullableFileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


