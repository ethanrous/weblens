/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MoveFilesParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveFilesParams{}

// MoveFilesParams struct for MoveFilesParams
type MoveFilesParams struct {
	FileIds []string `json:"fileIds,omitempty"`
	NewParentId *string `json:"newParentId,omitempty"`
}

// NewMoveFilesParams instantiates a new MoveFilesParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveFilesParams() *MoveFilesParams {
	this := MoveFilesParams{}
	return &this
}

// NewMoveFilesParamsWithDefaults instantiates a new MoveFilesParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveFilesParamsWithDefaults() *MoveFilesParams {
	this := MoveFilesParams{}
	return &this
}

// GetFileIds returns the FileIds field value if set, zero value otherwise.
func (o *MoveFilesParams) GetFileIds() []string {
	if o == nil || IsNil(o.FileIds) {
		var ret []string
		return ret
	}
	return o.FileIds
}

// GetFileIdsOk returns a tuple with the FileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveFilesParams) GetFileIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FileIds) {
		return nil, false
	}
	return o.FileIds, true
}

// HasFileIds returns a boolean if a field has been set.
func (o *MoveFilesParams) HasFileIds() bool {
	if o != nil && !IsNil(o.FileIds) {
		return true
	}

	return false
}

// SetFileIds gets a reference to the given []string and assigns it to the FileIds field.
func (o *MoveFilesParams) SetFileIds(v []string) {
	o.FileIds = v
}

// GetNewParentId returns the NewParentId field value if set, zero value otherwise.
func (o *MoveFilesParams) GetNewParentId() string {
	if o == nil || IsNil(o.NewParentId) {
		var ret string
		return ret
	}
	return *o.NewParentId
}

// GetNewParentIdOk returns a tuple with the NewParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveFilesParams) GetNewParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.NewParentId) {
		return nil, false
	}
	return o.NewParentId, true
}

// HasNewParentId returns a boolean if a field has been set.
func (o *MoveFilesParams) HasNewParentId() bool {
	if o != nil && !IsNil(o.NewParentId) {
		return true
	}

	return false
}

// SetNewParentId gets a reference to the given string and assigns it to the NewParentId field.
func (o *MoveFilesParams) SetNewParentId(v string) {
	o.NewParentId = &v
}

func (o MoveFilesParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveFilesParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileIds) {
		toSerialize["fileIds"] = o.FileIds
	}
	if !IsNil(o.NewParentId) {
		toSerialize["newParentId"] = o.NewParentId
	}
	return toSerialize, nil
}

type NullableMoveFilesParams struct {
	value *MoveFilesParams
	isSet bool
}

func (v NullableMoveFilesParams) Get() *MoveFilesParams {
	return v.value
}

func (v *NullableMoveFilesParams) Set(val *MoveFilesParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveFilesParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveFilesParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveFilesParams(val *MoveFilesParams) *NullableMoveFilesParams {
	return &NullableMoveFilesParams{value: val, isSet: true}
}

func (v NullableMoveFilesParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveFilesParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


