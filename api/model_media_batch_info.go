/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MediaBatchInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaBatchInfo{}

// MediaBatchInfo struct for MediaBatchInfo
type MediaBatchInfo struct {
	Media []MediaInfo `json:"Media,omitempty"`
	MediaCount *int32 `json:"mediaCount,omitempty"`
	TotalMediaCount *int32 `json:"totalMediaCount,omitempty"`
}

// NewMediaBatchInfo instantiates a new MediaBatchInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaBatchInfo() *MediaBatchInfo {
	this := MediaBatchInfo{}
	return &this
}

// NewMediaBatchInfoWithDefaults instantiates a new MediaBatchInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaBatchInfoWithDefaults() *MediaBatchInfo {
	this := MediaBatchInfo{}
	return &this
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *MediaBatchInfo) GetMedia() []MediaInfo {
	if o == nil || IsNil(o.Media) {
		var ret []MediaInfo
		return ret
	}
	return o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchInfo) GetMediaOk() ([]MediaInfo, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *MediaBatchInfo) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given []MediaInfo and assigns it to the Media field.
func (o *MediaBatchInfo) SetMedia(v []MediaInfo) {
	o.Media = v
}

// GetMediaCount returns the MediaCount field value if set, zero value otherwise.
func (o *MediaBatchInfo) GetMediaCount() int32 {
	if o == nil || IsNil(o.MediaCount) {
		var ret int32
		return ret
	}
	return *o.MediaCount
}

// GetMediaCountOk returns a tuple with the MediaCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchInfo) GetMediaCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MediaCount) {
		return nil, false
	}
	return o.MediaCount, true
}

// HasMediaCount returns a boolean if a field has been set.
func (o *MediaBatchInfo) HasMediaCount() bool {
	if o != nil && !IsNil(o.MediaCount) {
		return true
	}

	return false
}

// SetMediaCount gets a reference to the given int32 and assigns it to the MediaCount field.
func (o *MediaBatchInfo) SetMediaCount(v int32) {
	o.MediaCount = &v
}

// GetTotalMediaCount returns the TotalMediaCount field value if set, zero value otherwise.
func (o *MediaBatchInfo) GetTotalMediaCount() int32 {
	if o == nil || IsNil(o.TotalMediaCount) {
		var ret int32
		return ret
	}
	return *o.TotalMediaCount
}

// GetTotalMediaCountOk returns a tuple with the TotalMediaCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaBatchInfo) GetTotalMediaCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalMediaCount) {
		return nil, false
	}
	return o.TotalMediaCount, true
}

// HasTotalMediaCount returns a boolean if a field has been set.
func (o *MediaBatchInfo) HasTotalMediaCount() bool {
	if o != nil && !IsNil(o.TotalMediaCount) {
		return true
	}

	return false
}

// SetTotalMediaCount gets a reference to the given int32 and assigns it to the TotalMediaCount field.
func (o *MediaBatchInfo) SetTotalMediaCount(v int32) {
	o.TotalMediaCount = &v
}

func (o MediaBatchInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaBatchInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Media) {
		toSerialize["Media"] = o.Media
	}
	if !IsNil(o.MediaCount) {
		toSerialize["mediaCount"] = o.MediaCount
	}
	if !IsNil(o.TotalMediaCount) {
		toSerialize["totalMediaCount"] = o.TotalMediaCount
	}
	return toSerialize, nil
}

type NullableMediaBatchInfo struct {
	value *MediaBatchInfo
	isSet bool
}

func (v NullableMediaBatchInfo) Get() *MediaBatchInfo {
	return v.value
}

func (v *NullableMediaBatchInfo) Set(val *MediaBatchInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaBatchInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaBatchInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaBatchInfo(val *MediaBatchInfo) *NullableMediaBatchInfo {
	return &NullableMediaBatchInfo{value: val, isSet: true}
}

func (v NullableMediaBatchInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaBatchInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


