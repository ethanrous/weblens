/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInfo{}

// UserInfo struct for UserInfo
type UserInfo struct {
	Activated bool `json:"activated"`
	FullName string `json:"fullName"`
	HomeId string `json:"homeId"`
	IsOnline *bool `json:"isOnline,omitempty"`
	PermissionLevel int32 `json:"permissionLevel"`
	Token *string `json:"token,omitempty"`
	TrashId string `json:"trashId"`
	Username string `json:"username"`
}

type _UserInfo UserInfo

// NewUserInfo instantiates a new UserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfo(activated bool, fullName string, homeId string, permissionLevel int32, trashId string, username string) *UserInfo {
	this := UserInfo{}
	this.Activated = activated
	this.FullName = fullName
	this.HomeId = homeId
	this.PermissionLevel = permissionLevel
	this.TrashId = trashId
	this.Username = username
	return &this
}

// NewUserInfoWithDefaults instantiates a new UserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoWithDefaults() *UserInfo {
	this := UserInfo{}
	return &this
}

// GetActivated returns the Activated field value
func (o *UserInfo) GetActivated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetActivatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activated, true
}

// SetActivated sets field value
func (o *UserInfo) SetActivated(v bool) {
	o.Activated = v
}

// GetFullName returns the FullName field value
func (o *UserInfo) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *UserInfo) SetFullName(v string) {
	o.FullName = v
}

// GetHomeId returns the HomeId field value
func (o *UserInfo) GetHomeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HomeId
}

// GetHomeIdOk returns a tuple with the HomeId field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetHomeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HomeId, true
}

// SetHomeId sets field value
func (o *UserInfo) SetHomeId(v string) {
	o.HomeId = v
}

// GetIsOnline returns the IsOnline field value if set, zero value otherwise.
func (o *UserInfo) GetIsOnline() bool {
	if o == nil || IsNil(o.IsOnline) {
		var ret bool
		return ret
	}
	return *o.IsOnline
}

// GetIsOnlineOk returns a tuple with the IsOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetIsOnlineOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOnline) {
		return nil, false
	}
	return o.IsOnline, true
}

// HasIsOnline returns a boolean if a field has been set.
func (o *UserInfo) HasIsOnline() bool {
	if o != nil && !IsNil(o.IsOnline) {
		return true
	}

	return false
}

// SetIsOnline gets a reference to the given bool and assigns it to the IsOnline field.
func (o *UserInfo) SetIsOnline(v bool) {
	o.IsOnline = &v
}

// GetPermissionLevel returns the PermissionLevel field value
func (o *UserInfo) GetPermissionLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PermissionLevel
}

// GetPermissionLevelOk returns a tuple with the PermissionLevel field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetPermissionLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermissionLevel, true
}

// SetPermissionLevel sets field value
func (o *UserInfo) SetPermissionLevel(v int32) {
	o.PermissionLevel = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *UserInfo) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *UserInfo) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *UserInfo) SetToken(v string) {
	o.Token = &v
}

// GetTrashId returns the TrashId field value
func (o *UserInfo) GetTrashId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrashId
}

// GetTrashIdOk returns a tuple with the TrashId field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetTrashIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrashId, true
}

// SetTrashId sets field value
func (o *UserInfo) SetTrashId(v string) {
	o.TrashId = v
}

// GetUsername returns the Username field value
func (o *UserInfo) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserInfo) SetUsername(v string) {
	o.Username = v
}

func (o UserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activated"] = o.Activated
	toSerialize["fullName"] = o.FullName
	toSerialize["homeId"] = o.HomeId
	if !IsNil(o.IsOnline) {
		toSerialize["isOnline"] = o.IsOnline
	}
	toSerialize["permissionLevel"] = o.PermissionLevel
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	toSerialize["trashId"] = o.TrashId
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *UserInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activated",
		"fullName",
		"homeId",
		"permissionLevel",
		"trashId",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserInfo := _UserInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserInfo)

	if err != nil {
		return err
	}

	*o = UserInfo(varUserInfo)

	return err
}

type NullableUserInfo struct {
	value *UserInfo
	isSet bool
}

func (v NullableUserInfo) Get() *UserInfo {
	return v.value
}

func (v *NullableUserInfo) Set(val *UserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfo(val *UserInfo) *NullableUserInfo {
	return &NullableUserInfo{value: val, isSet: true}
}

func (v NullableUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


