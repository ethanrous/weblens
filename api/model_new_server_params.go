/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NewServerParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewServerParams{}

// NewServerParams struct for NewServerParams
type NewServerParams struct {
	CoreAddress *string `json:"coreAddress,omitempty"`
	Name *string `json:"name,omitempty"`
	Role *string `json:"role,omitempty"`
	ServerId *string `json:"serverId,omitempty"`
	UsingKey *string `json:"usingKey,omitempty"`
}

// NewNewServerParams instantiates a new NewServerParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewServerParams() *NewServerParams {
	this := NewServerParams{}
	return &this
}

// NewNewServerParamsWithDefaults instantiates a new NewServerParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewServerParamsWithDefaults() *NewServerParams {
	this := NewServerParams{}
	return &this
}

// GetCoreAddress returns the CoreAddress field value if set, zero value otherwise.
func (o *NewServerParams) GetCoreAddress() string {
	if o == nil || IsNil(o.CoreAddress) {
		var ret string
		return ret
	}
	return *o.CoreAddress
}

// GetCoreAddressOk returns a tuple with the CoreAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewServerParams) GetCoreAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CoreAddress) {
		return nil, false
	}
	return o.CoreAddress, true
}

// HasCoreAddress returns a boolean if a field has been set.
func (o *NewServerParams) HasCoreAddress() bool {
	if o != nil && !IsNil(o.CoreAddress) {
		return true
	}

	return false
}

// SetCoreAddress gets a reference to the given string and assigns it to the CoreAddress field.
func (o *NewServerParams) SetCoreAddress(v string) {
	o.CoreAddress = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NewServerParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewServerParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NewServerParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NewServerParams) SetName(v string) {
	o.Name = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *NewServerParams) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewServerParams) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *NewServerParams) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *NewServerParams) SetRole(v string) {
	o.Role = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *NewServerParams) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewServerParams) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *NewServerParams) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *NewServerParams) SetServerId(v string) {
	o.ServerId = &v
}

// GetUsingKey returns the UsingKey field value if set, zero value otherwise.
func (o *NewServerParams) GetUsingKey() string {
	if o == nil || IsNil(o.UsingKey) {
		var ret string
		return ret
	}
	return *o.UsingKey
}

// GetUsingKeyOk returns a tuple with the UsingKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewServerParams) GetUsingKeyOk() (*string, bool) {
	if o == nil || IsNil(o.UsingKey) {
		return nil, false
	}
	return o.UsingKey, true
}

// HasUsingKey returns a boolean if a field has been set.
func (o *NewServerParams) HasUsingKey() bool {
	if o != nil && !IsNil(o.UsingKey) {
		return true
	}

	return false
}

// SetUsingKey gets a reference to the given string and assigns it to the UsingKey field.
func (o *NewServerParams) SetUsingKey(v string) {
	o.UsingKey = &v
}

func (o NewServerParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewServerParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CoreAddress) {
		toSerialize["coreAddress"] = o.CoreAddress
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !IsNil(o.UsingKey) {
		toSerialize["usingKey"] = o.UsingKey
	}
	return toSerialize, nil
}

type NullableNewServerParams struct {
	value *NewServerParams
	isSet bool
}

func (v NullableNewServerParams) Get() *NewServerParams {
	return v.value
}

func (v *NullableNewServerParams) Set(val *NewServerParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNewServerParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNewServerParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewServerParams(val *NewServerParams) *NullableNewServerParams {
	return &NullableNewServerParams{value: val, isSet: true}
}

func (v NullableNewServerParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewServerParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


