/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MediaTypesInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaTypesInfo{}

// MediaTypesInfo struct for MediaTypesInfo
type MediaTypesInfo struct {
	ExtMap *map[string]MediaTypeInfo `json:"extMap,omitempty"`
	MimeMap *map[string]MediaTypeInfo `json:"mimeMap,omitempty"`
}

// NewMediaTypesInfo instantiates a new MediaTypesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaTypesInfo() *MediaTypesInfo {
	this := MediaTypesInfo{}
	return &this
}

// NewMediaTypesInfoWithDefaults instantiates a new MediaTypesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaTypesInfoWithDefaults() *MediaTypesInfo {
	this := MediaTypesInfo{}
	return &this
}

// GetExtMap returns the ExtMap field value if set, zero value otherwise.
func (o *MediaTypesInfo) GetExtMap() map[string]MediaTypeInfo {
	if o == nil || IsNil(o.ExtMap) {
		var ret map[string]MediaTypeInfo
		return ret
	}
	return *o.ExtMap
}

// GetExtMapOk returns a tuple with the ExtMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypesInfo) GetExtMapOk() (*map[string]MediaTypeInfo, bool) {
	if o == nil || IsNil(o.ExtMap) {
		return nil, false
	}
	return o.ExtMap, true
}

// HasExtMap returns a boolean if a field has been set.
func (o *MediaTypesInfo) HasExtMap() bool {
	if o != nil && !IsNil(o.ExtMap) {
		return true
	}

	return false
}

// SetExtMap gets a reference to the given map[string]MediaTypeInfo and assigns it to the ExtMap field.
func (o *MediaTypesInfo) SetExtMap(v map[string]MediaTypeInfo) {
	o.ExtMap = &v
}

// GetMimeMap returns the MimeMap field value if set, zero value otherwise.
func (o *MediaTypesInfo) GetMimeMap() map[string]MediaTypeInfo {
	if o == nil || IsNil(o.MimeMap) {
		var ret map[string]MediaTypeInfo
		return ret
	}
	return *o.MimeMap
}

// GetMimeMapOk returns a tuple with the MimeMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaTypesInfo) GetMimeMapOk() (*map[string]MediaTypeInfo, bool) {
	if o == nil || IsNil(o.MimeMap) {
		return nil, false
	}
	return o.MimeMap, true
}

// HasMimeMap returns a boolean if a field has been set.
func (o *MediaTypesInfo) HasMimeMap() bool {
	if o != nil && !IsNil(o.MimeMap) {
		return true
	}

	return false
}

// SetMimeMap gets a reference to the given map[string]MediaTypeInfo and assigns it to the MimeMap field.
func (o *MediaTypesInfo) SetMimeMap(v map[string]MediaTypeInfo) {
	o.MimeMap = &v
}

func (o MediaTypesInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaTypesInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExtMap) {
		toSerialize["extMap"] = o.ExtMap
	}
	if !IsNil(o.MimeMap) {
		toSerialize["mimeMap"] = o.MimeMap
	}
	return toSerialize, nil
}

type NullableMediaTypesInfo struct {
	value *MediaTypesInfo
	isSet bool
}

func (v NullableMediaTypesInfo) Get() *MediaTypesInfo {
	return v.value
}

func (v *NullableMediaTypesInfo) Set(val *MediaTypesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaTypesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaTypesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaTypesInfo(val *MediaTypesInfo) *NullableMediaTypesInfo {
	return &NullableMediaTypesInfo{value: val, isSet: true}
}

func (v NullableMediaTypesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaTypesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


