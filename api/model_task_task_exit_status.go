/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TaskTaskExitStatus the model 'TaskTaskExitStatus'
type TaskTaskExitStatus string

// List of task.TaskExitStatus
const (
	TaskNoStatus TaskTaskExitStatus = ""
	TaskSuccess TaskTaskExitStatus = "success"
	TaskCanceled TaskTaskExitStatus = "cancelled"
	TaskError TaskTaskExitStatus = "error"
)

// All allowed values of TaskTaskExitStatus enum
var AllowedTaskTaskExitStatusEnumValues = []TaskTaskExitStatus{
	"",
	"success",
	"cancelled",
	"error",
}

func (v *TaskTaskExitStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskTaskExitStatus(value)
	for _, existing := range AllowedTaskTaskExitStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskTaskExitStatus", value)
}

// NewTaskTaskExitStatusFromValue returns a pointer to a valid TaskTaskExitStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskTaskExitStatusFromValue(v string) (*TaskTaskExitStatus, error) {
	ev := TaskTaskExitStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskTaskExitStatus: valid values are %v", v, AllowedTaskTaskExitStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskTaskExitStatus) IsValid() bool {
	for _, existing := range AllowedTaskTaskExitStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to task.TaskExitStatus value
func (v TaskTaskExitStatus) Ptr() *TaskTaskExitStatus {
	return &v
}

type NullableTaskTaskExitStatus struct {
	value *TaskTaskExitStatus
	isSet bool
}

func (v NullableTaskTaskExitStatus) Get() *TaskTaskExitStatus {
	return v.value
}

func (v *NullableTaskTaskExitStatus) Set(val *TaskTaskExitStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskTaskExitStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskTaskExitStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskTaskExitStatus(val *TaskTaskExitStatus) *NullableTaskTaskExitStatus {
	return &NullableTaskTaskExitStatus{value: val, isSet: true}
}

func (v NullableTaskTaskExitStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskTaskExitStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

