/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilesListParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesListParams{}

// FilesListParams struct for FilesListParams
type FilesListParams struct {
	FileIds []string `json:"fileIds,omitempty"`
}

// NewFilesListParams instantiates a new FilesListParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesListParams() *FilesListParams {
	this := FilesListParams{}
	return &this
}

// NewFilesListParamsWithDefaults instantiates a new FilesListParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesListParamsWithDefaults() *FilesListParams {
	this := FilesListParams{}
	return &this
}

// GetFileIds returns the FileIds field value if set, zero value otherwise.
func (o *FilesListParams) GetFileIds() []string {
	if o == nil || IsNil(o.FileIds) {
		var ret []string
		return ret
	}
	return o.FileIds
}

// GetFileIdsOk returns a tuple with the FileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesListParams) GetFileIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FileIds) {
		return nil, false
	}
	return o.FileIds, true
}

// HasFileIds returns a boolean if a field has been set.
func (o *FilesListParams) HasFileIds() bool {
	if o != nil && !IsNil(o.FileIds) {
		return true
	}

	return false
}

// SetFileIds gets a reference to the given []string and assigns it to the FileIds field.
func (o *FilesListParams) SetFileIds(v []string) {
	o.FileIds = v
}

func (o FilesListParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesListParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileIds) {
		toSerialize["fileIds"] = o.FileIds
	}
	return toSerialize, nil
}

type NullableFilesListParams struct {
	value *FilesListParams
	isSet bool
}

func (v NullableFilesListParams) Get() *FilesListParams {
	return v.value
}

func (v *NullableFilesListParams) Set(val *FilesListParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesListParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesListParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesListParams(val *FilesListParams) *NullableFilesListParams {
	return &NullableFilesListParams{value: val, isSet: true}
}

func (v NullableFilesListParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesListParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


