/*
Weblens API

Testing MediaAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ethanrous/weblens/api"
)

func Test_openapi_MediaAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MediaAPIService CleanupMedia", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MediaAPI.CleanupMedia(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaAPIService DropMedia", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MediaAPI.DropMedia(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaAPIService GetMedia", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MediaAPI.GetMedia(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaAPIService GetMediaFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mediaId string

		resp, httpRes, err := apiClient.MediaAPI.GetMediaFile(context.Background(), mediaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaAPIService GetMediaImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mediaId string
		var extension string

		resp, httpRes, err := apiClient.MediaAPI.GetMediaImage(context.Background(), mediaId, extension).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaAPIService GetMediaInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mediaId string

		resp, httpRes, err := apiClient.MediaAPI.GetMediaInfo(context.Background(), mediaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaAPIService GetMediaTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MediaAPI.GetMediaTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaAPIService SetMediaLiked", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mediaId string

		httpRes, err := apiClient.MediaAPI.SetMediaLiked(context.Background(), mediaId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaAPIService SetMediaVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MediaAPI.SetMediaVisibility(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaAPIService StreamVideo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mediaId string

		httpRes, err := apiClient.MediaAPI.StreamVideo(context.Background(), mediaId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
