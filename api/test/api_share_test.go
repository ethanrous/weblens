/*
Weblens API

Testing ShareAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/ethanrous/weblens/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_ShareAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ShareAPIService CreateFileShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ShareAPI.CreateFileShare(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShareAPIService DeleteFileShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shareId string

		httpRes, err := apiClient.ShareAPI.DeleteFileShare(context.Background(), shareId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShareAPIService GetFileShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shareId string

		resp, httpRes, err := apiClient.ShareAPI.GetFileShare(context.Background(), shareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShareAPIService SetShareAccessors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		// var shareId string
		//
		// resp, httpRes, err := apiClient.ShareAPI.SetShareAccessors(context.Background(), shareId).Execute()
		//
		// require.Nil(t, err)
		// require.NotNil(t, resp)
		// assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ShareAPIService SetSharePublic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shareId string

		httpRes, err := apiClient.ShareAPI.SetSharePublic(context.Background(), shareId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
