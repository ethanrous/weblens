/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddUserParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddUserParams{}

// AddUserParams struct for AddUserParams
type AddUserParams struct {
	CanDelete *bool `json:"canDelete,omitempty"`
	CanDownload *bool `json:"canDownload,omitempty"`
	CanEdit *bool `json:"canEdit,omitempty"`
	Username string `json:"username"`
}

type _AddUserParams AddUserParams

// NewAddUserParams instantiates a new AddUserParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUserParams(username string) *AddUserParams {
	this := AddUserParams{}
	this.Username = username
	return &this
}

// NewAddUserParamsWithDefaults instantiates a new AddUserParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUserParamsWithDefaults() *AddUserParams {
	this := AddUserParams{}
	return &this
}

// GetCanDelete returns the CanDelete field value if set, zero value otherwise.
func (o *AddUserParams) GetCanDelete() bool {
	if o == nil || IsNil(o.CanDelete) {
		var ret bool
		return ret
	}
	return *o.CanDelete
}

// GetCanDeleteOk returns a tuple with the CanDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserParams) GetCanDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDelete) {
		return nil, false
	}
	return o.CanDelete, true
}

// HasCanDelete returns a boolean if a field has been set.
func (o *AddUserParams) HasCanDelete() bool {
	if o != nil && !IsNil(o.CanDelete) {
		return true
	}

	return false
}

// SetCanDelete gets a reference to the given bool and assigns it to the CanDelete field.
func (o *AddUserParams) SetCanDelete(v bool) {
	o.CanDelete = &v
}

// GetCanDownload returns the CanDownload field value if set, zero value otherwise.
func (o *AddUserParams) GetCanDownload() bool {
	if o == nil || IsNil(o.CanDownload) {
		var ret bool
		return ret
	}
	return *o.CanDownload
}

// GetCanDownloadOk returns a tuple with the CanDownload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserParams) GetCanDownloadOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDownload) {
		return nil, false
	}
	return o.CanDownload, true
}

// HasCanDownload returns a boolean if a field has been set.
func (o *AddUserParams) HasCanDownload() bool {
	if o != nil && !IsNil(o.CanDownload) {
		return true
	}

	return false
}

// SetCanDownload gets a reference to the given bool and assigns it to the CanDownload field.
func (o *AddUserParams) SetCanDownload(v bool) {
	o.CanDownload = &v
}

// GetCanEdit returns the CanEdit field value if set, zero value otherwise.
func (o *AddUserParams) GetCanEdit() bool {
	if o == nil || IsNil(o.CanEdit) {
		var ret bool
		return ret
	}
	return *o.CanEdit
}

// GetCanEditOk returns a tuple with the CanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserParams) GetCanEditOk() (*bool, bool) {
	if o == nil || IsNil(o.CanEdit) {
		return nil, false
	}
	return o.CanEdit, true
}

// HasCanEdit returns a boolean if a field has been set.
func (o *AddUserParams) HasCanEdit() bool {
	if o != nil && !IsNil(o.CanEdit) {
		return true
	}

	return false
}

// SetCanEdit gets a reference to the given bool and assigns it to the CanEdit field.
func (o *AddUserParams) SetCanEdit(v bool) {
	o.CanEdit = &v
}

// GetUsername returns the Username field value
func (o *AddUserParams) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AddUserParams) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AddUserParams) SetUsername(v string) {
	o.Username = v
}

func (o AddUserParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddUserParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanDelete) {
		toSerialize["canDelete"] = o.CanDelete
	}
	if !IsNil(o.CanDownload) {
		toSerialize["canDownload"] = o.CanDownload
	}
	if !IsNil(o.CanEdit) {
		toSerialize["canEdit"] = o.CanEdit
	}
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *AddUserParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddUserParams := _AddUserParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddUserParams)

	if err != nil {
		return err
	}

	*o = AddUserParams(varAddUserParams)

	return err
}

type NullableAddUserParams struct {
	value *AddUserParams
	isSet bool
}

func (v NullableAddUserParams) Get() *AddUserParams {
	return v.value
}

func (v *NullableAddUserParams) Set(val *AddUserParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUserParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUserParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUserParams(val *AddUserParams) *NullableAddUserParams {
	return &NullableAddUserParams{value: val, isSet: true}
}

func (v NullableAddUserParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUserParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


