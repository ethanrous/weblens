/*
Weblens API

Programmatic access to the Weblens server

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PermissionsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionsInfo{}

// PermissionsInfo struct for PermissionsInfo
type PermissionsInfo struct {
	CanDelete *bool `json:"canDelete,omitempty"`
	CanDownload *bool `json:"canDownload,omitempty"`
	CanEdit *bool `json:"canEdit,omitempty"`
	CanView *bool `json:"canView,omitempty"`
}

// NewPermissionsInfo instantiates a new PermissionsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionsInfo() *PermissionsInfo {
	this := PermissionsInfo{}
	return &this
}

// NewPermissionsInfoWithDefaults instantiates a new PermissionsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionsInfoWithDefaults() *PermissionsInfo {
	this := PermissionsInfo{}
	return &this
}

// GetCanDelete returns the CanDelete field value if set, zero value otherwise.
func (o *PermissionsInfo) GetCanDelete() bool {
	if o == nil || IsNil(o.CanDelete) {
		var ret bool
		return ret
	}
	return *o.CanDelete
}

// GetCanDeleteOk returns a tuple with the CanDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsInfo) GetCanDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDelete) {
		return nil, false
	}
	return o.CanDelete, true
}

// HasCanDelete returns a boolean if a field has been set.
func (o *PermissionsInfo) HasCanDelete() bool {
	if o != nil && !IsNil(o.CanDelete) {
		return true
	}

	return false
}

// SetCanDelete gets a reference to the given bool and assigns it to the CanDelete field.
func (o *PermissionsInfo) SetCanDelete(v bool) {
	o.CanDelete = &v
}

// GetCanDownload returns the CanDownload field value if set, zero value otherwise.
func (o *PermissionsInfo) GetCanDownload() bool {
	if o == nil || IsNil(o.CanDownload) {
		var ret bool
		return ret
	}
	return *o.CanDownload
}

// GetCanDownloadOk returns a tuple with the CanDownload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsInfo) GetCanDownloadOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDownload) {
		return nil, false
	}
	return o.CanDownload, true
}

// HasCanDownload returns a boolean if a field has been set.
func (o *PermissionsInfo) HasCanDownload() bool {
	if o != nil && !IsNil(o.CanDownload) {
		return true
	}

	return false
}

// SetCanDownload gets a reference to the given bool and assigns it to the CanDownload field.
func (o *PermissionsInfo) SetCanDownload(v bool) {
	o.CanDownload = &v
}

// GetCanEdit returns the CanEdit field value if set, zero value otherwise.
func (o *PermissionsInfo) GetCanEdit() bool {
	if o == nil || IsNil(o.CanEdit) {
		var ret bool
		return ret
	}
	return *o.CanEdit
}

// GetCanEditOk returns a tuple with the CanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsInfo) GetCanEditOk() (*bool, bool) {
	if o == nil || IsNil(o.CanEdit) {
		return nil, false
	}
	return o.CanEdit, true
}

// HasCanEdit returns a boolean if a field has been set.
func (o *PermissionsInfo) HasCanEdit() bool {
	if o != nil && !IsNil(o.CanEdit) {
		return true
	}

	return false
}

// SetCanEdit gets a reference to the given bool and assigns it to the CanEdit field.
func (o *PermissionsInfo) SetCanEdit(v bool) {
	o.CanEdit = &v
}

// GetCanView returns the CanView field value if set, zero value otherwise.
func (o *PermissionsInfo) GetCanView() bool {
	if o == nil || IsNil(o.CanView) {
		var ret bool
		return ret
	}
	return *o.CanView
}

// GetCanViewOk returns a tuple with the CanView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsInfo) GetCanViewOk() (*bool, bool) {
	if o == nil || IsNil(o.CanView) {
		return nil, false
	}
	return o.CanView, true
}

// HasCanView returns a boolean if a field has been set.
func (o *PermissionsInfo) HasCanView() bool {
	if o != nil && !IsNil(o.CanView) {
		return true
	}

	return false
}

// SetCanView gets a reference to the given bool and assigns it to the CanView field.
func (o *PermissionsInfo) SetCanView(v bool) {
	o.CanView = &v
}

func (o PermissionsInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanDelete) {
		toSerialize["canDelete"] = o.CanDelete
	}
	if !IsNil(o.CanDownload) {
		toSerialize["canDownload"] = o.CanDownload
	}
	if !IsNil(o.CanEdit) {
		toSerialize["canEdit"] = o.CanEdit
	}
	if !IsNil(o.CanView) {
		toSerialize["canView"] = o.CanView
	}
	return toSerialize, nil
}

type NullablePermissionsInfo struct {
	value *PermissionsInfo
	isSet bool
}

func (v NullablePermissionsInfo) Get() *PermissionsInfo {
	return v.value
}

func (v *NullablePermissionsInfo) Set(val *PermissionsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsInfo(val *PermissionsInfo) *NullablePermissionsInfo {
	return &NullablePermissionsInfo{value: val, isSet: true}
}

func (v NullablePermissionsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


